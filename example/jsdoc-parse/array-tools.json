[
  {
    "id": "module:array-tools",
    "longname": "module:array-tools",
    "name": "array-tools",
    "kind": "module",
    "description": "Lightweight tool-kit for working with arrays.\n\n```js\n> var a = require(\"array-tools\");\n> a.exists([ 1, 2, 3 ], 1)\ntrue\n```\n\nYou can also chain together operations. The process: \n\n1. Pass your input array to array-tools as an argument. \n2. Chain together your operations. From array-tools, you may use {@link module:array-tools.pluck}, {@link module:array-tools.pick}, {@link module:array-tools.arrayify}, {@link module:array-tools.where}, {@link module:array-tools.findWhere}, {@link module:array-tools.without}, {@link module:array-tools.unique}, {@link module:array-tools.spliceWhile}, {@link module:array-tools.extract}, {@link module:array-tools.flatten}, {@link module:array-tools.exists} and {@link module:array-tools.sortBy} in the chain. From core Array methods you may use `filter`, `reverse`, `sort`, `concat`, `slice`, `every`, `some` and `map`.\n3. Finally, following all above methods except {@link module:array-tools.exists}, call `.val()` to extract the result. \n\n```js\n> var a = require(\"array-tools\");\n> a([ 1, 2, 2, 3 ]).exists(1)\ntrue\n> a([ 1, 2, 2, 3 ]).without(1).exists(1)\nfalse\n> a([ 1, 2, 2, 3 ]).without(1).unique().val()\n[ 2, 3 ]\n```",
    "typicalname": "a",
    "order": 0
  },
  {
    "id": "module:array-tools.arrayify",
    "longname": "module:array-tools.arrayify",
    "name": "arrayify",
    "scope": "static",
    "kind": "function",
    "description": "Takes input and guarantees an array back. Result can be one of three things:\n\n- puts a single scalar in an array\n- converts array-like object (e.g. `arguments`) to a real array\n- converts `null` or `undefined` to an empty array",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.arrayify",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "the input value to convert to an array",
        "name": "any"
      }
    ],
    "examples": [
      "> a.arrayify(null)\n[]\n> a.arrayify(0)\n[ 0 ]\n> a.arrayify([ 1, 2 ])\n[ 1, 2 ]\n> function f(){ return a.arrayify(arguments); }\n> f(1,2,3)\n[ 1, 2, 3 ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "any value in",
    "codeName": "arrayify",
    "order": 3
  },
  {
    "id": "module:array-tools.union",
    "longname": "module:array-tools.union",
    "name": "union",
    "scope": "static",
    "kind": "function",
    "description": "merge two arrays into a single array of unique values",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.union",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "First array",
        "name": "array1"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Second array",
        "name": "array2"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the unique ID property name",
        "name": "idKey"
      }
    ],
    "examples": [
      "> var array1 = [ 1, 2 ], array2 = [ 2, 3 ];\n> a.union(array1, array2)\n[ 1, 2, 3 ]\n> var array1 = [ { id: 1 }, { id: 2 } ], array2 = [ { id: 2 }, { id: 3 } ];\n> a.union(array1, array2)\n[ { id: 1 }, { id: 2 }, { id: 3 } ]\n> var array2 = [ { id: 2, blah: true }, { id: 3 } ]\n> a.union(array1, array2)\n[ { id: 1 },\n  { id: 2 },\n  { id: 2, blah: true },\n  { id: 3 } ]\n> a.union(array1, array2, \"id\")\n[ { id: 1 }, { id: 2 }, { id: 3 } ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "multiple arrays in",
    "codeName": "union",
    "order": 8
  },
  {
    "id": "module:array-tools.commonSequence",
    "longname": "module:array-tools.commonSequence",
    "name": "commonSequence",
    "scope": "static",
    "kind": "function",
    "description": "Returns the initial elements which both input arrays have in common",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.commonSequence",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "first array to compare",
        "name": "a"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "second array to compare",
        "name": "b"
      }
    ],
    "examples": [
      "> a.commonSequence([1,2,3], [1,2,4])\n[ 1, 2 ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "multiple arrays in",
    "codeName": "commonSequence",
    "order": 9
  },
  {
    "id": "module:array-tools.pluck",
    "longname": "module:array-tools.pluck",
    "name": "pluck",
    "scope": "static",
    "kind": "function",
    "description": "Plucks the value of the specified property from each object in the input array",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.pluck",
    "params": [
      {
        "type": {
          "names": [
            "Array.<object>"
          ]
        },
        "description": "the input array of objects",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "variable": true,
        "description": "the property(s) to pluck",
        "name": "property"
      }
    ],
    "examples": [
      "> var data = [\n    {one: 1, two: 2},\n    {two: \"two\"},\n    {one: \"one\", two: \"zwei\"},\n];\n> a.pluck(data, \"one\");\n[ 1, 'one' ]\n> a.pluck(data, \"two\");\n[ 2, 'two', 'zwei' ]\n> a.pluck(data, \"one\", \"two\");\n[ 1, 'two', 'one' ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "record set in",
    "codeName": "pluck",
    "order": 1
  },
  {
    "id": "module:array-tools.pick",
    "longname": "module:array-tools.pick",
    "name": "pick",
    "scope": "static",
    "kind": "function",
    "description": "return a copy of the input `arrayOfObjects` containing objects having only the cherry-picked properties",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.pick",
    "params": [
      {
        "type": {
          "names": [
            "Array.<object>"
          ]
        },
        "description": "the input",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "variable": true,
        "description": "the properties to include in the result",
        "name": "property"
      }
    ],
    "examples": [
      "> data = [\n    { one: \"un\", two: \"deux\", three: \"trois\" },\n    { two: \"two\", one: \"one\" },\n    { four: \"quattro\" },\n    { two: \"zwei\" }\n]\n> a.pick(data, \"two\")\n[ { two: 'deux' },\n  { two: 'two' },\n  { two: 'zwei' } ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<object>"
          ]
        }
      }
    ],
    "category": "record set in",
    "codeName": "pick",
    "order": 2
  },
  {
    "id": "module:array-tools.where",
    "longname": "module:array-tools.where",
    "name": "where",
    "scope": "static",
    "kind": "function",
    "description": "returns an array containing items from `arrayOfObjects` where key/value pairs\nfrom `query` are matched identically",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.where",
    "params": [
      {
        "type": {
          "names": [
            "Array.<object>"
          ]
        },
        "description": "the array to search",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "query"
          ]
        },
        "description": "an object containing the key/value pairs you want to match",
        "name": "query"
      }
    ],
    "examples": [
      "> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n> a.where(dudes, { age: 8})\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 } ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "record set in",
    "codeName": "where",
    "order": 5
  },
  {
    "id": "module:array-tools.findWhere",
    "longname": "module:array-tools.findWhere",
    "name": "findWhere",
    "scope": "static",
    "kind": "function",
    "description": "returns the first item from `arrayOfObjects` where key/value pairs\nfrom `query` are matched identically",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.findWhere",
    "params": [
      {
        "type": {
          "names": [
            "Array.<object>"
          ]
        },
        "description": "the array to search",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object containing the key/value pairs you want to match",
        "name": "query"
      }
    ],
    "examples": [
      "> dudes = [{ name: \"Jim\", age: 8}, { name: \"Clive\", age: 8}, { name: \"Hater\", age: 9}]\n[ { name: 'Jim', age: 8 },\n  { name: 'Clive', age: 8 },\n  { name: 'Hater', age: 9 } ]\n> a.findWhere(dudes, { age: 8})\n{ name: 'Jim', age: 8 }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "category": "record set in",
    "codeName": "findWhere",
    "order": 6
  },
  {
    "id": "module:array-tools.sortBy",
    "longname": "module:array-tools.sortBy",
    "name": "sortBy",
    "scope": "static",
    "kind": "function",
    "description": "Sort an array of objects by one or more fields",
    "memberof": "module:array-tools",
    "params": [
      {
        "type": {
          "names": [
            "Array.<object>"
          ]
        },
        "description": "input array",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "description": "column name(s) to sort by",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "specific sort orders, per columns",
        "name": "customOrder"
      }
    ],
    "examples": [
      ">  var fixture = [\n    { a: 4, b: 1, c: 1},\n    { a: 4, b: 3, c: 1},\n    { a: 2, b: 2, c: 3},\n    { a: 2, b: 2, c: 2},\n    { a: 1, b: 3, c: 4},\n    { a: 1, b: 1, c: 4},\n    { a: 1, b: 2, c: 4},\n    { a: 3, b: 3, c: 3},\n    { a: 4, b: 3, c: 1}\n];\n> a.sortBy(fixture, [\"a\", \"b\", \"c\"])\n[ { a: 1, b: 1, c: 4 },\n  { a: 1, b: 2, c: 4 },\n  { a: 1, b: 3, c: 4 },\n  { a: 2, b: 2, c: 2 },\n  { a: 2, b: 2, c: 3 },\n  { a: 3, b: 3, c: 3 },\n  { a: 4, b: 1, c: 1 },\n  { a: 4, b: 3, c: 1 },\n  { a: 4, b: 3, c: 1 } ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "since": "1.5.0",
    "category": "record set in",
    "codeName": "sortBy",
    "order": 14
  },
  {
    "id": "module:array-tools.exists",
    "longname": "module:array-tools.exists",
    "name": "exists",
    "scope": "static",
    "kind": "function",
    "description": "returns true if a value, or nested object value exists in an array",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.exists",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the array to search",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "the value to search for",
        "name": "value"
      }
    ],
    "examples": [
      "> a.exists([ 1, 2, 3 ], 2)\ntrue\n> a.exists([ { result: false }, { result: false } ], { result: true })\nfalse\n> a.exists([ { result: true }, { result: false } ], { result: true })\ntrue\n> a.exists([ { result: true }, { result: true } ], { result: true })\ntrue"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "category": "single array in",
    "codeName": "exists",
    "order": 4
  },
  {
    "id": "module:array-tools.without",
    "longname": "module:array-tools.without",
    "name": "without",
    "scope": "static",
    "kind": "function",
    "description": "Returns the input minus the specified values.",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.without",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the input array",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "a single, or array of values to omit",
        "name": "toRemove"
      }
    ],
    "examples": [
      "> a.without([ 1, 2, 3 ], 2)\n[ 1, 3 ]\n> a.without([ 1, 2, 3 ], [ 2, 3 ])\n[ 1 ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "single array in",
    "codeName": "without",
    "order": 7
  },
  {
    "id": "module:array-tools.unique",
    "longname": "module:array-tools.unique",
    "name": "unique",
    "scope": "static",
    "kind": "function",
    "description": "returns an array of unique values",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.unique",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "input array",
        "name": "array"
      }
    ],
    "examples": [
      "> n = [1,6,6,7,1]\n[ 1, 6, 6, 7, 1 ]\n> a.unique(n)\n[ 1, 6, 7 ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "single array in",
    "codeName": "unique",
    "order": 10
  },
  {
    "id": "module:array-tools.spliceWhile",
    "longname": "module:array-tools.spliceWhile",
    "name": "spliceWhile",
    "scope": "static",
    "kind": "function",
    "description": "splice from `index` until `test` fails",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.spliceWhile",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the input array",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "the position to begin splicing from",
        "name": "index"
      },
      {
        "type": {
          "names": [
            "RegExp"
          ]
        },
        "description": "the test to continue splicing while true",
        "name": "test"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "the elements to add to the array",
        "name": "...elementN"
      }
    ],
    "examples": [
      "> letters = [\"a\", \"a\", \"b\"]\n[ 'a', 'a', 'b' ]\n> a.spliceWhile(letters, 0, /a/, \"x\")\n[ 'a', 'a' ]\n> letters\n[ 'x', 'b' ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "category": "single array in",
    "codeName": "spliceWhile",
    "order": 11
  },
  {
    "id": "module:array-tools.extract",
    "longname": "module:array-tools.extract",
    "name": "extract",
    "scope": "static",
    "kind": "function",
    "description": "Removes items from `array` which satisfy the query. Modifies the input array, returns the extracted.",
    "memberof": "module:array-tools",
    "alias": "module:array-tools.extract",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the input array, modified directly",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "object"
          ]
        },
        "description": "Per item in the array, if either the function returns truthy or the exists query is satisfied, the item is extracted",
        "name": "query"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the extracted items."
      }
    ],
    "category": "single array in",
    "codeName": "extract",
    "order": 12
  },
  {
    "id": "module:array-tools.flatten",
    "longname": "module:array-tools.flatten",
    "name": "flatten",
    "scope": "static",
    "kind": "function",
    "description": "flatten an array of arrays into a single array",
    "memberof": "module:array-tools",
    "examples": [
      "> numbers = [ 1, 2, [ 3, 4 ], 5 ]\n> a.flatten(numbers)\n[ 1, 2, 3, 4, 5 ]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "since": "1.4.0",
    "category": "single array in",
    "codeName": "flatten",
    "todoList": [
      {
        "done": false,
        "task": "document"
      }
    ],
    "order": 13
  }
]