[
  {
    "id": "<anonymous>~undefined",
    "name": "undefined",
    "scope": "inner",
    "kind": "member",
    "description": "Used as a safe reference for `undefined` in pre ES5 environments.",
    "memberof": "<anonymous>",
    "codeName": "undefined"
  },
  {
    "id": "<anonymous>~VERSION",
    "name": "VERSION",
    "scope": "inner",
    "kind": "member",
    "description": "Used as the semantic version number.",
    "memberof": "<anonymous>",
    "codeName": "VERSION"
  },
  {
    "id": "<anonymous>~BIND_FLAG",
    "name": "BIND_FLAG",
    "scope": "inner",
    "kind": "member",
    "description": "Used to compose bitmasks for wrapper metadata.",
    "memberof": "<anonymous>",
    "codeName": "BIND_FLAG"
  },
  {
    "id": "<anonymous>~DEFAULT_TRUNC_LENGTH",
    "name": "DEFAULT_TRUNC_LENGTH",
    "scope": "inner",
    "kind": "member",
    "description": "Used as default options for `_.trunc`.",
    "memberof": "<anonymous>",
    "codeName": "DEFAULT_TRUNC_LENGTH"
  },
  {
    "id": "<anonymous>~HOT_COUNT",
    "name": "HOT_COUNT",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect when a function becomes hot.",
    "memberof": "<anonymous>",
    "codeName": "HOT_COUNT"
  },
  {
    "id": "<anonymous>~LAZY_FILTER_FLAG",
    "name": "LAZY_FILTER_FLAG",
    "scope": "inner",
    "kind": "member",
    "description": "Used to indicate the type of lazy iteratees.",
    "memberof": "<anonymous>",
    "codeName": "LAZY_FILTER_FLAG"
  },
  {
    "id": "<anonymous>~FUNC_ERROR_TEXT",
    "name": "FUNC_ERROR_TEXT",
    "scope": "inner",
    "kind": "member",
    "description": "Used as the `TypeError` message for \"Functions\" methods.",
    "memberof": "<anonymous>",
    "codeName": "FUNC_ERROR_TEXT"
  },
  {
    "id": "<anonymous>~PLACEHOLDER",
    "name": "PLACEHOLDER",
    "scope": "inner",
    "kind": "member",
    "description": "Used as the internal argument placeholder.",
    "memberof": "<anonymous>",
    "codeName": "PLACEHOLDER"
  },
  {
    "id": "<anonymous>~reEmptyStringLeading",
    "name": "reEmptyStringLeading",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match empty string literals in compiled template source.",
    "memberof": "<anonymous>",
    "codeName": "reEmptyStringLeading"
  },
  {
    "id": "<anonymous>~reEscapedHtml",
    "name": "reEscapedHtml",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match HTML entities and HTML characters.",
    "memberof": "<anonymous>",
    "codeName": "reEscapedHtml"
  },
  {
    "id": "<anonymous>~reEscape",
    "name": "reEscape",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match template delimiters.",
    "memberof": "<anonymous>",
    "codeName": "reEscape"
  },
  {
    "id": "<anonymous>~reEsTemplate",
    "name": "reEsTemplate",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match ES6 template delimiters.\nSee the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)\nfor more details.",
    "memberof": "<anonymous>",
    "codeName": "reEsTemplate"
  },
  {
    "id": "<anonymous>~reFlags",
    "name": "reFlags",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match `RegExp` flags from their coerced string values.",
    "memberof": "<anonymous>",
    "codeName": "reFlags"
  },
  {
    "id": "<anonymous>~reFuncName",
    "name": "reFuncName",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect named functions.",
    "memberof": "<anonymous>",
    "codeName": "reFuncName"
  },
  {
    "id": "<anonymous>~reHexPrefix",
    "name": "reHexPrefix",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect hexadecimal string values.",
    "memberof": "<anonymous>",
    "codeName": "reHexPrefix"
  },
  {
    "id": "<anonymous>~reHostCtor",
    "name": "reHostCtor",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect host constructors (Safari > 5).",
    "memberof": "<anonymous>",
    "codeName": "reHostCtor"
  },
  {
    "id": "<anonymous>~reLatin1",
    "name": "reLatin1",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match latin-1 supplementary letters (excluding mathematical operators).",
    "memberof": "<anonymous>",
    "codeName": "reLatin1"
  },
  {
    "id": "<anonymous>~reNoMatch",
    "name": "reNoMatch",
    "scope": "inner",
    "kind": "member",
    "description": "Used to ensure capturing order of template delimiters.",
    "memberof": "<anonymous>",
    "codeName": "reNoMatch"
  },
  {
    "id": "<anonymous>~reRegExpChars",
    "name": "reRegExpChars",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match `RegExp` special characters.\nSee this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)\nfor more details.",
    "memberof": "<anonymous>",
    "codeName": "reRegExpChars"
  },
  {
    "id": "<anonymous>~reThis",
    "name": "reThis",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect functions containing a `this` reference.",
    "memberof": "<anonymous>",
    "codeName": "reThis"
  },
  {
    "id": "<anonymous>~reUnescapedString",
    "name": "reUnescapedString",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match unescaped characters in compiled string literals.",
    "memberof": "<anonymous>",
    "codeName": "reUnescapedString"
  },
  {
    "id": "<anonymous>~reWords",
    "name": "reWords",
    "scope": "inner",
    "kind": "member",
    "description": "Used to match words to create compound words.",
    "memberof": "<anonymous>",
    "codeName": "reWords"
  },
  {
    "id": "<anonymous>~whitespace",
    "name": "whitespace",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect and test for whitespace.",
    "memberof": "<anonymous>",
    "codeName": "whitespace"
  },
  {
    "id": "<anonymous>~contextProps",
    "name": "contextProps",
    "scope": "inner",
    "kind": "member",
    "description": "Used to assign default `context` object properties.",
    "memberof": "<anonymous>",
    "codeName": "contextProps"
  },
  {
    "id": "<anonymous>~shadowProps",
    "name": "shadowProps",
    "scope": "inner",
    "kind": "member",
    "description": "Used to fix the JScript `[[DontEnum]]` bug.",
    "memberof": "<anonymous>",
    "codeName": "shadowProps"
  },
  {
    "id": "<anonymous>~templateCounter",
    "name": "templateCounter",
    "scope": "inner",
    "kind": "member",
    "description": "Used to make template sourceURLs easier to identify.",
    "memberof": "<anonymous>",
    "codeName": "templateCounter"
  },
  {
    "id": "<anonymous>~argsClass",
    "name": "argsClass",
    "scope": "inner",
    "kind": "member",
    "description": "`Object#toString` result references.",
    "memberof": "<anonymous>",
    "codeName": "argsClass"
  },
  {
    "id": "<anonymous>~arrayLikeClasses",
    "name": "arrayLikeClasses",
    "scope": "inner",
    "kind": "member",
    "description": "Used to identify object classifications that are treated like arrays.",
    "memberof": "<anonymous>",
    "codeName": "arrayLikeClasses"
  },
  {
    "id": "<anonymous>~cloneableClasses",
    "name": "cloneableClasses",
    "scope": "inner",
    "kind": "member",
    "description": "Used to identify object classifications that `_.clone` supports.",
    "memberof": "<anonymous>",
    "codeName": "cloneableClasses"
  },
  {
    "id": "<anonymous>~debounceOptions",
    "name": "debounceOptions",
    "scope": "inner",
    "kind": "member",
    "description": "Used as an internal `_.debounce` options object by `_.throttle`.",
    "memberof": "<anonymous>",
    "codeName": "debounceOptions"
  },
  {
    "id": "<anonymous>~deburredLetters",
    "name": "deburredLetters",
    "scope": "inner",
    "kind": "member",
    "description": "Used to map latin-1 supplementary letters to basic latin letters.",
    "memberof": "<anonymous>",
    "codeName": "deburredLetters"
  },
  {
    "id": "<anonymous>~htmlEscapes",
    "name": "htmlEscapes",
    "scope": "inner",
    "kind": "member",
    "description": "Used to map characters to HTML entities.",
    "memberof": "<anonymous>",
    "codeName": "htmlEscapes"
  },
  {
    "id": "<anonymous>~htmlUnescapes",
    "name": "htmlUnescapes",
    "scope": "inner",
    "kind": "member",
    "description": "Used to map HTML entities to characters.",
    "memberof": "<anonymous>",
    "codeName": "htmlUnescapes"
  },
  {
    "id": "<anonymous>~objectTypes",
    "name": "objectTypes",
    "scope": "inner",
    "kind": "member",
    "description": "Used to determine if values are of the language type `Object`.",
    "memberof": "<anonymous>",
    "codeName": "objectTypes"
  },
  {
    "id": "<anonymous>~stringEscapes",
    "name": "stringEscapes",
    "scope": "inner",
    "kind": "member",
    "description": "Used to escape characters for inclusion in compiled string literals.",
    "memberof": "<anonymous>",
    "codeName": "stringEscapes"
  },
  {
    "id": "<anonymous>~root",
    "name": "root",
    "scope": "inner",
    "kind": "member",
    "description": "Used as a reference to the global object.\n\nThe `this` value is used if it is the global object to avoid Greasemonkey's\nrestricted `window` object, otherwise the `window` object is used.",
    "memberof": "<anonymous>",
    "codeName": "root"
  },
  {
    "id": "<anonymous>~freeExports",
    "name": "freeExports",
    "scope": "inner",
    "kind": "member",
    "description": "Detect free variable `exports`.",
    "memberof": "<anonymous>",
    "codeName": "freeExports"
  },
  {
    "id": "<anonymous>~freeModule",
    "name": "freeModule",
    "scope": "inner",
    "kind": "member",
    "description": "Detect free variable `module`.",
    "memberof": "<anonymous>",
    "codeName": "freeModule"
  },
  {
    "id": "<anonymous>~freeGlobal",
    "name": "freeGlobal",
    "scope": "inner",
    "kind": "member",
    "description": "Detect free variable `global` from Node.js or Browserified code and use it as `root`.",
    "memberof": "<anonymous>",
    "codeName": "freeGlobal"
  },
  {
    "id": "<anonymous>~moduleExports",
    "name": "moduleExports",
    "scope": "inner",
    "kind": "member",
    "description": "Detect the popular CommonJS extension `module.exports`.",
    "memberof": "<anonymous>",
    "codeName": "moduleExports"
  },
  {
    "id": "_.runInContext",
    "name": "runInContext",
    "scope": "static",
    "kind": "function",
    "description": "Create a new pristine `lodash` function using the given `context` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "root",
        "description": "The context object.",
        "name": "context"
      }
    ],
    "examples": [
      "_.mixin({ 'add': function(a, b) { return a + b; } }, false);\n\nvar lodash = _.runInContext();\nlodash.mixin({ 'sub': function(a, b) { return a - b; } }, false);\n\n_.isFunction(_.add);\n// => true\n\n_.isFunction(_.sub);\n// => false\n\nlodash.isFunction(lodash.add);\n// => false\n\nlodash.isFunction(lodash.sub);\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns a new `lodash` function."
      }
    ],
    "category": "Utility",
    "codeName": "runInContext"
  },
  {
    "id": "_.runInContext~Array",
    "name": "Array",
    "scope": "inner",
    "kind": "member",
    "description": "Native constructor references.",
    "memberof": "_.runInContext",
    "codeName": "Array"
  },
  {
    "id": "_.runInContext~arrayProto",
    "name": "arrayProto",
    "scope": "inner",
    "kind": "member",
    "description": "Used for native method references.",
    "memberof": "_.runInContext",
    "codeName": "arrayProto"
  },
  {
    "id": "_.runInContext~document",
    "name": "document",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect DOM support.",
    "memberof": "_.runInContext",
    "codeName": "document"
  },
  {
    "id": "_.runInContext~fnToString",
    "name": "fnToString",
    "scope": "inner",
    "kind": "member",
    "description": "Used to resolve the decompiled source of functions.",
    "memberof": "_.runInContext",
    "codeName": "fnToString"
  },
  {
    "id": "_.runInContext~hasOwnProperty",
    "name": "hasOwnProperty",
    "scope": "inner",
    "kind": "member",
    "description": "Used to check objects for own properties.",
    "memberof": "_.runInContext",
    "codeName": "hasOwnProperty"
  },
  {
    "id": "_.runInContext~idCounter",
    "name": "idCounter",
    "scope": "inner",
    "kind": "member",
    "description": "Used to generate unique IDs.",
    "memberof": "_.runInContext",
    "codeName": "idCounter"
  },
  {
    "id": "_.runInContext~oldDash",
    "name": "oldDash",
    "scope": "inner",
    "kind": "member",
    "description": "Used to restore the original `_` reference in `_.noConflict`.",
    "memberof": "_.runInContext",
    "codeName": "oldDash"
  },
  {
    "id": "_.runInContext~toString",
    "name": "toString",
    "scope": "inner",
    "kind": "member",
    "description": "Used to resolve the internal `[[Class]]` of values.",
    "memberof": "_.runInContext",
    "codeName": "toString"
  },
  {
    "id": "_.runInContext~reNative",
    "name": "reNative",
    "scope": "inner",
    "kind": "member",
    "description": "Used to detect if a method is native.",
    "memberof": "_.runInContext",
    "codeName": "reNative"
  },
  {
    "id": "_.runInContext~ArrayBuffer",
    "name": "ArrayBuffer",
    "scope": "inner",
    "kind": "member",
    "description": "Native method references.",
    "memberof": "_.runInContext",
    "codeName": "ArrayBuffer"
  },
  {
    "id": "_.runInContext~Float64Array",
    "name": "Float64Array",
    "scope": "inner",
    "kind": "member",
    "description": "Used to clone array buffers.",
    "memberof": "_.runInContext",
    "codeName": "Float64Array"
  },
  {
    "id": "_.runInContext~NEGATIVE_INFINITY",
    "name": "NEGATIVE_INFINITY",
    "scope": "inner",
    "kind": "member",
    "description": "Used as references for `-Infinity` and `Infinity`.",
    "memberof": "_.runInContext",
    "codeName": "NEGATIVE_INFINITY"
  },
  {
    "id": "_.runInContext~MAX_ARRAY_LENGTH",
    "name": "MAX_ARRAY_LENGTH",
    "scope": "inner",
    "kind": "member",
    "description": "Used as references for the maximum length and index of an array.",
    "memberof": "_.runInContext",
    "codeName": "MAX_ARRAY_LENGTH"
  },
  {
    "id": "_.runInContext~FLOAT64_BYTES_PER_ELEMENT",
    "name": "FLOAT64_BYTES_PER_ELEMENT",
    "scope": "inner",
    "kind": "member",
    "description": "Used as the size, in bytes, of each `Float64Array` element.",
    "memberof": "_.runInContext",
    "codeName": "FLOAT64_BYTES_PER_ELEMENT"
  },
  {
    "id": "_.runInContext~MAX_SAFE_INTEGER",
    "name": "MAX_SAFE_INTEGER",
    "scope": "inner",
    "kind": "member",
    "description": "Used as the maximum length of an array-like value.\nSee the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\nfor more details.",
    "memberof": "_.runInContext",
    "codeName": "MAX_SAFE_INTEGER"
  },
  {
    "id": "_.runInContext~metaMap",
    "name": "metaMap",
    "scope": "inner",
    "kind": "member",
    "description": "Used to store function metadata.",
    "memberof": "_.runInContext",
    "codeName": "metaMap"
  },
  {
    "id": "_.runInContext~ctorByClass",
    "name": "ctorByClass",
    "scope": "inner",
    "kind": "member",
    "description": "Used to lookup a built-in constructor by `[[Class]]`.",
    "memberof": "_.runInContext",
    "codeName": "ctorByClass"
  },
  {
    "id": "_.runInContext~nonEnumProps",
    "name": "nonEnumProps",
    "scope": "inner",
    "kind": "member",
    "description": "Used to avoid iterating over non-enumerable properties in IE < 9.",
    "memberof": "_.runInContext",
    "codeName": "nonEnumProps"
  },
  {
    "id": "_",
    "name": "_",
    "scope": "global",
    "kind": "class",
    "category": "Chain"
  },
  {
    "id": "_()",
    "name": "_",
    "kind": "constructor",
    "description": "Creates a `lodash` object which wraps `value` to enable intuitive chaining.\nMethods that operate on and return arrays, collections, and functions can\nbe chained together. Methods that return a boolean or single value will\nautomatically end the chain returning the unwrapped value. Explicit chaining\nmay be enabled using `_.chain`. The execution of chained methods is lazy,\nthat is, execution is deferred until `_#value` is implicitly or explicitly\ncalled.\n\nLazy evaluation allows several methods to support shortcut fusion. Shortcut\nfusion is an optimization that merges iteratees to avoid creating intermediate\narrays and reduce the number of iteratee executions.\n\nChaining is supported in custom builds as long as the `_#value` method is\ndirectly or indirectly included in the build.\n\nIn addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n`concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\nand `unshift`\n\nThe wrapper functons that support shortcut fusion are:\n`drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`, `first`,\n`initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`, `slice`,\n`take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `where`\n\nThe chainable wrapper functions are:\n`after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,\n`callback`, `chain`, `chunk`, `compact`, `concat`, `constant`, `countBy`,\n`create`, `curry`, `debounce`, `defaults`, `defer`, `delay`, `difference`,\n`drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`, `flatten`,\n`flattenDeep`, `flow`, `flowRight`, `forEach`, `forEachRight`, `forIn`,\n`forInRight`, `forOwn`, `forOwnRight`, `functions`, `groupBy`, `indexBy`,\n`initial`, `intersection`, `invert`, `invoke`, `keys`, `keysIn`, `map`,\n`mapValues`, `matches`, `memoize`, `merge`, `mixin`, `negate`, `noop`,\n`omit`, `once`, `pairs`, `partial`, `partialRight`, `partition`, `pick`,\n`pluck`, `property`, `propertyOf`, `pull`, `pullAt`, `push`, `range`,\n`rearg`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,\n`sortBy`, `sortByAll`, `splice`, `take`, `takeRight`, `takeRightWhile`,\n`takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `transform`,\n`union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,\n`without`, `wrap`, `xor`, `zip`, and `zipObject`\n\nThe wrapper functions that are **not** chainable by default are:\n`attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,\n`endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,\n`findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,\n`identity`, `includes`, `indexOf`, `isArguments`, `isArray`, `isBoolean`,\n`isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`, `isFinite`,\n`isFunction`, `isMatch` , `isNative`, `isNaN`, `isNull`, `isNumber`,\n`isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,\n`kebabCase`, `last`, `lastIndexOf`, `max`, `min`, `noConflict`, `now`, `pad`,\n`padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n`repeat`, `result`, `runInContext`, `shift`, `size`, `snakeCase`, `some`,\n`sortedIndex`, `sortedLastIndex`, `startsWith`, `template`, `trim`, `trimLeft`,\n`trimRight`, `trunc`, `unescape`, `uniqueId`, `value`, and `words`\n\nThe wrapper function `sample` will return a wrapped value when `n` is provided,\notherwise an unwrapped value is returned.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to wrap in a `lodash` instance.",
        "name": "value"
      }
    ],
    "examples": [
      "var wrapped = _([1, 2, 3]);\n\n// returns an unwrapped value\nwrapped.reduce(function(sum, n) { return sum + n; });\n// => 6\n\n// returns a wrapped value\nvar squares = wrapped.map(function(n) { return n * n; });\n\n_.isArray(squares);\n// => false\n\n_.isArray(squares.value());\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns a `lodash` instance."
      }
    ]
  },
  {
    "id": "_.support",
    "name": "support",
    "scope": "static",
    "kind": "member",
    "description": "An object environment feature flags.",
    "memberof": "_",
    "type": {
      "names": [
        "Object"
      ]
    },
    "codeName": "support"
  },
  {
    "id": "_.support.support.argsClass",
    "name": "support.argsClass",
    "scope": "static",
    "kind": "member",
    "description": "Detect if the `[[Class]]` of `arguments` objects is resolvable\n(all but Firefox < 4, IE < 9).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.argsClass"
  },
  {
    "id": "_.support.support.enumErrorProps",
    "name": "support.enumErrorProps",
    "scope": "static",
    "kind": "member",
    "description": "Detect if `name` or `message` properties of `Error.prototype` are\nenumerable by default (IE < 9, Safari < 5.1).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.enumErrorProps"
  },
  {
    "id": "_.support.support.enumPrototypes",
    "name": "support.enumPrototypes",
    "scope": "static",
    "kind": "member",
    "description": "Detect if `prototype` properties are enumerable by default.\n\nFirefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1\n(if the prototype or a property on the prototype has been set)\nincorrectly set the `[[Enumerable]]` value of a function's `prototype`\nproperty to `true`.",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.enumPrototypes"
  },
  {
    "id": "_.support.support.funcDecomp",
    "name": "support.funcDecomp",
    "scope": "static",
    "kind": "member",
    "description": "Detect if functions can be decompiled by `Function#toString`\n(all but Firefox OS certified apps, older Opera mobile browsers, and\nthe PlayStation 3; forced `false` for Windows 8 apps).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.funcDecomp"
  },
  {
    "id": "_.support.support.funcNames",
    "name": "support.funcNames",
    "scope": "static",
    "kind": "member",
    "description": "Detect if `Function#name` is supported (all but IE).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.funcNames"
  },
  {
    "id": "_.support.support.nodeClass",
    "name": "support.nodeClass",
    "scope": "static",
    "kind": "member",
    "description": "Detect if the `[[Class]]` of DOM nodes is resolvable (all but IE < 9).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.nodeClass"
  },
  {
    "id": "_.support.support.nonEnumStrings",
    "name": "support.nonEnumStrings",
    "scope": "static",
    "kind": "member",
    "description": "Detect if string indexes are non-enumerable\n(IE < 9, RingoJS, Rhino, Narwhal).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.nonEnumStrings"
  },
  {
    "id": "_.support.support.nonEnumShadows",
    "name": "support.nonEnumShadows",
    "scope": "static",
    "kind": "member",
    "description": "Detect if properties shadowing those on `Object.prototype` are\nnon-enumerable.\n\nIn IE < 9 an object's own properties, shadowing non-enumerable ones,\nare made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.nonEnumShadows"
  },
  {
    "id": "_.support.support.ownLast",
    "name": "support.ownLast",
    "scope": "static",
    "kind": "member",
    "description": "Detect if own properties are iterated after inherited properties (IE < 9).",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.ownLast"
  },
  {
    "id": "_.support.support.spliceObjects",
    "name": "support.spliceObjects",
    "scope": "static",
    "kind": "member",
    "description": "Detect if `Array#shift` and `Array#splice` augment array-like objects\ncorrectly.\n\nFirefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array `shift()`\nand `splice()` functions that fail to remove the last element, `value[0]`,\nof array-like objects even though the `length` property is set to `0`.\nThe `shift()` method is buggy in compatibility modes of IE 8, while `splice()`\nis buggy regardless of mode in IE < 9.",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.spliceObjects"
  },
  {
    "id": "_.support.support.unindexedChars",
    "name": "support.unindexedChars",
    "scope": "static",
    "kind": "member",
    "description": "Detect lack of support for accessing string characters by index.\n\nIE < 8 can't access characters by index. IE 8 can only access characters\nby index on string literals, not string objects.",
    "memberof": "_.support",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "codeName": "support.unindexedChars"
  },
  {
    "id": "_.lodash.templateSettings",
    "name": "templateSettings",
    "scope": "static",
    "kind": "member",
    "description": "By default, the template delimiters used by Lo-Dash are like those in\nembedded Ruby (ERB). Change the following template settings to use\nalternative delimiters.",
    "memberof": "_.lodash",
    "type": {
      "names": [
        "Object"
      ]
    },
    "codeName": "lodash.templateSettings"
  },
  {
    "id": "_.templateSettings.escape",
    "name": "escape",
    "scope": "static",
    "kind": "member",
    "description": "Used to detect `data` property values to be HTML-escaped.",
    "memberof": "_.templateSettings",
    "type": {
      "names": [
        "RegExp"
      ]
    },
    "codeName": "escape"
  },
  {
    "id": "_.templateSettings.evaluate",
    "name": "evaluate",
    "scope": "static",
    "kind": "member",
    "description": "Used to detect code to be evaluated.",
    "memberof": "_.templateSettings",
    "type": {
      "names": [
        "RegExp"
      ]
    },
    "codeName": "evaluate"
  },
  {
    "id": "_.templateSettings.interpolate",
    "name": "interpolate",
    "scope": "static",
    "kind": "member",
    "description": "Used to detect `data` property values to inject.",
    "memberof": "_.templateSettings",
    "type": {
      "names": [
        "RegExp"
      ]
    },
    "codeName": "interpolate"
  },
  {
    "id": "_.templateSettings.variable",
    "name": "variable",
    "scope": "static",
    "kind": "member",
    "description": "Used to reference the data object in the template text.",
    "memberof": "_.templateSettings",
    "type": {
      "names": [
        "string"
      ]
    },
    "codeName": "variable"
  },
  {
    "id": "_.templateSettings.imports",
    "name": "imports",
    "scope": "static",
    "kind": "member",
    "description": "Used to import variables into the compiled template.",
    "memberof": "_.templateSettings",
    "type": {
      "names": [
        "Object"
      ]
    },
    "codeName": "imports"
  },
  {
    "id": "_.templateSettings.imports._",
    "name": "_",
    "scope": "static",
    "kind": "member",
    "description": "A reference to the `lodash` function.",
    "memberof": "_.templateSettings.imports",
    "type": {
      "names": [
        "function"
      ]
    },
    "codeName": "_"
  },
  {
    "id": "_.chunk",
    "name": "chunk",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of elements split into groups the length of `size`.\nIf `collection` can't be split evenly, the final chunk will be the remaining\nelements.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to process.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "numer"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The length of each chunk.",
        "name": "size"
      }
    ],
    "examples": [
      "_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array containing chunks."
      }
    ],
    "category": "Array",
    "codeName": "chunk",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.compact",
    "name": "compact",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are all falsey.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to compact.",
        "name": "array"
      }
    ],
    "examples": [
      "_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of filtered values."
      }
    ],
    "category": "Array",
    "codeName": "compact"
  },
  {
    "id": "_.difference",
    "name": "difference",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array excluding all values of the provided arrays using\n`SameValueZero` for equality comparisons.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to inspect.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arrays of values to exclude.",
        "name": "values"
      }
    ],
    "examples": [
      "_.difference([1, 2, 3], [5, 2, 10]);\n// => [1, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of filtered values."
      }
    ],
    "category": "Array",
    "codeName": "difference"
  },
  {
    "id": "_.drop",
    "name": "drop",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` with `n` elements dropped from the beginning.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The number of elements to drop.",
        "name": "n"
      }
    ],
    "examples": [
      "_.drop([1, 2, 3], 1);\n// => [2, 3]\n\n_.drop([1, 2, 3], 2);\n// => [3]\n\n_.drop([1, 2, 3], 5);\n// => []\n\n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "drop",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.dropRight",
    "name": "dropRight",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` with `n` elements dropped from the end.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The number of elements to drop.",
        "name": "n"
      }
    ],
    "examples": [
      "_.dropRight([1, 2, 3], 1);\n// => [1, 2]\n\n_.dropRight([1, 2, 3], 2);\n// => [1]\n\n_.dropRight([1, 2, 3], 5);\n// => []\n\n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "dropRight",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.dropRightWhile",
    "name": "dropRightWhile",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\nbound to `thisArg` and invoked with three arguments; (value, index, array).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per element.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.dropRightWhile([1, 2, 3], function(n) { return n > 1; });\n// => [1]\n\nvar users = [\n  { 'user': 'barney',  'status': 'busy', 'active': false },\n  { 'user': 'fred',    'status': 'busy', 'active': true },\n  { 'user': 'pebbles', 'status': 'away', 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.dropRightWhile(users, 'active'), 'user');\n// => ['barney']\n\n// using \"_.where\" callback shorthand\n_.pluck(_.dropRightWhile(users, { 'status': 'away' }), 'user');\n// => ['barney', 'fred']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "dropRightWhile"
  },
  {
    "id": "_.dropWhile",
    "name": "dropWhile",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\nbound to `thisArg` and invoked with three arguments; (value, index, array).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per element.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.dropWhile([1, 2, 3], function(n) { return n < 3; });\n// => [3]\n\nvar users = [\n  { 'user': 'barney',  'status': 'busy', 'active': true },\n  { 'user': 'fred',    'status': 'busy', 'active': false },\n  { 'user': 'pebbles', 'status': 'away', 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.dropWhile(users, 'active'), 'user');\n// => ['fred', 'pebbles']\n\n// using \"_.where\" callback shorthand\n_.pluck(_.dropWhile(users, { 'status': 'busy' }), 'user');\n// => ['pebbles']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "dropWhile"
  },
  {
    "id": "_.findIndex",
    "name": "findIndex",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.find` except that it returns the index of the first\nelement `predicate` returns truthy for, instead of the element itself.\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to search.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.findIndex(users, function(chr) { return chr.age < 40; });\n// => 0\n\n// using \"_.where\" callback shorthand\n_.findIndex(users, { 'age': 1 });\n// => 2\n\n// using \"_.pluck\" callback shorthand\n_.findIndex(users, 'active');\n// => 1"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the index of the found element, else `-1`."
      }
    ],
    "category": "Array",
    "codeName": "findIndex"
  },
  {
    "id": "_.findLastIndex",
    "name": "findLastIndex",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.findIndex` except that it iterates over elements\nof `collection` from right to left.\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to search.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.findLastIndex(users, function(chr) { return chr.age < 40; });\n// => 2\n\n// using \"_.where\" callback shorthand\n_.findLastIndex(users, { 'age': 40 });\n// => 1\n\n// using \"_.pluck\" callback shorthand\n_.findLastIndex(users, 'active');\n// => 0"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the index of the found element, else `-1`."
      }
    ],
    "category": "Array",
    "codeName": "findLastIndex"
  },
  {
    "id": "_.head",
    "name": "head",
    "scope": "static",
    "kind": "function",
    "description": "Gets the first element of `array`.",
    "memberof": "_",
    "alias": "head",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      }
    ],
    "examples": [
      "_.first([1, 2, 3]);\n// => 1\n\n_.first([]);\n// => undefined"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the first element of `array`."
      }
    ],
    "category": "Array",
    "codeName": "first"
  },
  {
    "id": "_.flatten",
    "name": "flatten",
    "scope": "static",
    "kind": "function",
    "description": "Flattens a nested array. If `isDeep` is `true` the array is recursively\nflattened, otherwise it is only flattened a single level.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to flatten.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Specify a deep flatten.",
        "name": "isDeep"
      }
    ],
    "examples": [
      "_.flatten([1, [2], [3, [[4]]]]);\n// => [1, 2, 3, [[4]]];\n\n// using `isDeep`\n_.flatten([1, [2], [3, [[4]]]], true);\n// => [1, 2, 3, 4];"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new flattened array."
      }
    ],
    "category": "Array",
    "codeName": "flatten",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.flattenDeep",
    "name": "flattenDeep",
    "scope": "static",
    "kind": "function",
    "description": "Recursively flattens a nested array.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to recursively flatten.",
        "name": "array"
      }
    ],
    "examples": [
      "_.flattenDeep([1, [2], [3, [[4]]]]);\n// => [1, 2, 3, 4];"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new flattened array."
      }
    ],
    "category": "Array",
    "codeName": "flattenDeep"
  },
  {
    "id": "_.indexOf",
    "name": "indexOf",
    "scope": "static",
    "kind": "function",
    "description": "Gets the index at which the first occurrence of `value` is found in `array`\nusing `SameValueZero` for equality comparisons. If `fromIndex` is negative,\nit is used as the offset from the end of `array`. If `array` is sorted\nproviding `true` for `fromIndex` performs a faster binary search.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to search.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to search for.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "boolean",
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The index to search from or `true`\n to perform a binary search on a sorted array.",
        "name": "fromIndex"
      }
    ],
    "examples": [
      "_.indexOf([1, 2, 3, 1, 2, 3], 2);\n// => 1\n\n// using `fromIndex`\n_.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// => 4\n\n// performing a binary search\n_.indexOf([4, 4, 5, 5, 6, 6], 5, true);\n// => 2"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the index of the matched value, else `-1`."
      }
    ],
    "category": "Array",
    "codeName": "indexOf"
  },
  {
    "id": "_.initial",
    "name": "initial",
    "scope": "static",
    "kind": "function",
    "description": "Gets all but the last element of `array`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      }
    ],
    "examples": [
      "_.initial([1, 2, 3]);\n// => [1, 2]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "category": "Array",
    "codeName": "initial"
  },
  {
    "id": "_.intersection",
    "name": "intersection",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of unique values in all provided arrays using `SameValueZero`\nfor equality comparisons.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arrays to inspect.",
        "name": "arrays"
      }
    ],
    "examples": [
      "_.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n// => [1, 2]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of shared values."
      }
    ],
    "category": "Array",
    "codeName": "intersection"
  },
  {
    "id": "_.last",
    "name": "last",
    "scope": "static",
    "kind": "function",
    "description": "Gets the last element of `array`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      }
    ],
    "examples": [
      "_.last([1, 2, 3]);\n// => 3"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the last element of `array`."
      }
    ],
    "category": "Array",
    "codeName": "last"
  },
  {
    "id": "_.lastIndexOf",
    "name": "lastIndexOf",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.indexOf` except that it iterates over elements of\n`array` from right to left.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to search.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to search for.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "boolean",
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "array.length-1",
        "description": "The index to search from\n or `true` to perform a binary search on a sorted array.",
        "name": "fromIndex"
      }
    ],
    "examples": [
      "_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n// => 4\n\n// using `fromIndex`\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// => 1\n\n// performing a binary search\n_.lastIndexOf([4, 4, 5, 5, 6, 6], 5, true);\n// => 3"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the index of the matched value, else `-1`."
      }
    ],
    "category": "Array",
    "codeName": "lastIndexOf"
  },
  {
    "id": "_.pull",
    "name": "pull",
    "scope": "static",
    "kind": "function",
    "description": "Removes all provided values from `array` using `SameValueZero` for equality\ncomparisons.\n\n**Notes:**\n - Unlike `_.without`, this method mutates `array`.\n - `SameValueZero` comparisons are like strict equality comparisons, e.g. `===`,\n   except that `NaN` matches `NaN`. See the [ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\n   for more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to modify.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The values to remove.",
        "name": "values"
      }
    ],
    "examples": [
      "var array = [1, 2, 3, 1, 2, 3];\n_.pull(array, 2, 3);\nconsole.log(array);\n// => [1, 1]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns `array`."
      }
    ],
    "category": "Array",
    "codeName": "pull"
  },
  {
    "id": "_.pullAt",
    "name": "pullAt",
    "scope": "static",
    "kind": "function",
    "description": "Removes elements from `array` corresponding to the specified indexes and\nreturns an array of the removed elements. Indexes may be specified as an\narray of indexes or as individual arguments.\n\n**Note:** Unlike `_.at`, this method mutates `array`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to modify.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number",
            "Array.<number>"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The indexes of elements to remove,\n specified as individual indexes or arrays of indexes.",
        "name": "indexes"
      }
    ],
    "examples": [
      "var array = [5, 10, 15, 20];\nvar evens = _.pullAt(array, [1, 3]);\n\nconsole.log(array);\n// => [5, 15]\n\nconsole.log(evens);\n// => [10, 20]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of removed elements."
      }
    ],
    "category": "Array",
    "codeName": "pullAt"
  },
  {
    "id": "_.remove",
    "name": "remove",
    "scope": "static",
    "kind": "function",
    "description": "Removes all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is bound to\n`thisArg` and invoked with three arguments; (value, index, array).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.\n\n**Note:** Unlike `_.filter`, this method mutates `array`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to modify.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) { return n % 2 == 0; });\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of removed elements."
      }
    ],
    "category": "Array",
    "codeName": "remove"
  },
  {
    "id": "_.tail",
    "name": "tail",
    "scope": "static",
    "kind": "function",
    "description": "Gets all but the first element of `array`.",
    "memberof": "_",
    "alias": "tail",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      }
    ],
    "examples": [
      "_.rest([1, 2, 3]);\n// => [2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "category": "Array",
    "codeName": "rest"
  },
  {
    "id": "_.slice",
    "name": "slice",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` from `start` up to, but not including, `end`.\n\n**Note:** This function is used instead of `Array#slice` to support node\nlists in IE < 9 and to ensure dense arrays are returned.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to slice.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The start position.",
        "name": "start"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "array.length",
        "description": "The end position.",
        "name": "end"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "category": "Array",
    "codeName": "slice"
  },
  {
    "id": "_.sortedIndex",
    "name": "sortedIndex",
    "scope": "static",
    "kind": "function",
    "description": "Uses a binary search to determine the lowest index at which `value` should\nbe inserted into `array` in order to maintain its sort order. If an iteratee\nfunction is provided it is invoked for `value` and each element of `array`\nto compute their sort ranking. The iteratee is bound to `thisArg` and\ninvoked with one argument; (value).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The sorted array to inspect.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to evaluate.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.sortedIndex([30, 50], 40);\n// => 1\n\n_.sortedIndex([4, 4, 5, 5, 6, 6], 5);\n// => 2\n\nvar dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };\n\n// using an iteratee function\n_.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {\n  return this.data[word];\n}, dict);\n// => 1\n\n// using \"_.pluck\" callback shorthand\n_.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n// => 1"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the index at which `value` should be inserted\n into `array`."
      }
    ],
    "category": "Array",
    "codeName": "sortedIndex"
  },
  {
    "id": "_.sortedLastIndex",
    "name": "sortedLastIndex",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The sorted array to inspect.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to evaluate.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.sortedLastIndex([4, 4, 5, 5, 6, 6], 5);\n// => 4"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the index at which `value` should be inserted\n into `array`."
      }
    ],
    "category": "Array",
    "codeName": "sortedLastIndex"
  },
  {
    "id": "_.take",
    "name": "take",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` with `n` elements taken from the beginning.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The number of elements to take.",
        "name": "n"
      }
    ],
    "examples": [
      "_.take([1, 2, 3], 1);\n// => [1]\n\n_.take([1, 2, 3], 2);\n// => [1, 2]\n\n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.take([1, 2, 3], 0);\n// => []"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "take",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.takeRight",
    "name": "takeRight",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` with `n` elements taken from the end.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The number of elements to take.",
        "name": "n"
      }
    ],
    "examples": [
      "_.takeRight([1, 2, 3], 1);\n// => [3]\n\n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n\n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.takeRight([1, 2, 3], 0);\n// => []"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "takeRight",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.takeRightWhile",
    "name": "takeRightWhile",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is bound to `thisArg`\nand invoked with three arguments; (value, index, array).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per element.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.takeRightWhile([1, 2, 3], function(n) { return n > 1; });\n// => [2, 3]\n\nvar users = [\n  { 'user': 'barney',  'status': 'busy', 'active': false },\n  { 'user': 'fred',    'status': 'busy', 'active': true },\n  { 'user': 'pebbles', 'status': 'away', 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.takeRightWhile(users, 'active'), 'user');\n// => ['fred', 'pebbles']\n\n// using \"_.where\" callback shorthand\n_.pluck(_.takeRightWhile(users, { 'status': 'away' }), 'user');\n// => ['pebbles']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "takeRightWhile"
  },
  {
    "id": "_.takeWhile",
    "name": "takeWhile",
    "scope": "static",
    "kind": "function",
    "description": "Creates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is bound to\n`thisArg` and invoked with three arguments; (value, index, array).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to query.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per element.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.takeWhile([1, 2, 3], function(n) { return n < 3; });\n// => [1, 2]\n\nvar users = [\n  { 'user': 'barney',  'status': 'busy', 'active': true },\n  { 'user': 'fred',    'status': 'busy', 'active': false },\n  { 'user': 'pebbles', 'status': 'away', 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.takeWhile(users, 'active'), 'user');\n// => ['barney']\n\n// using \"_.where\" callback shorthand\n_.pluck(_.takeWhile(users, { 'status': 'busy' }), 'user');\n// => ['barney', 'fred']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the slice of `array`."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Array",
    "codeName": "takeWhile"
  },
  {
    "id": "_.union",
    "name": "union",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of unique values, in order, of the provided arrays using\n`SameValueZero` for equality comparisons.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arrays to inspect.",
        "name": "arrays"
      }
    ],
    "examples": [
      "_.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n// => [1, 2, 3, 5, 4]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of combined values."
      }
    ],
    "category": "Array",
    "codeName": "union"
  },
  {
    "id": "_.unique",
    "name": "unique",
    "scope": "static",
    "kind": "function",
    "description": "Creates a duplicate-value-free version of an array using `SameValueZero`\nfor equality comparisons. Providing `true` for `isSorted` performs a faster\nsearch algorithm for sorted arrays. If an iteratee function is provided it\nis invoked for each value in the array to generate the criterion by which\nuniqueness is computed. The `iteratee` is bound to `thisArg` and invoked\nwith three arguments; (value, index, array).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_",
    "alias": "unique",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to inspect.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Specify the array is sorted.",
        "name": "isSorted"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "description": "The function invoked per iteration.\n If a property name or object is provided it is used to create a \"_.pluck\"\n or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.uniq([1, 2, 1]);\n// => [1, 2]\n\n// using `isSorted`\n_.uniq([1, 1, 2], true);\n// => [1, 2]\n\n// using an iteratee function\n_.uniq([1, 2.5, 1.5, 2], function(n) { return this.floor(n); }, Math);\n// => [1, 2.5]\n\n// using \"_.pluck\" callback shorthand\n_.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new duplicate-value-free array."
      }
    ],
    "category": "Array",
    "codeName": "uniq"
  },
  {
    "id": "_.unzip",
    "name": "unzip",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre `_.zip`\nconfiguration.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array of grouped elements to process.",
        "name": "array"
      }
    ],
    "examples": [
      "var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n// => [['fred', 30, true], ['barney', 40, false]]\n\n_.unzip(zipped);\n// => [['fred', 'barney'], [30, 40], [true, false]]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of regrouped elements."
      }
    ],
    "category": "Array",
    "codeName": "unzip"
  },
  {
    "id": "_.without",
    "name": "without",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array excluding all provided values using `SameValueZero` for\nequality comparisons.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The array to filter.",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The values to exclude.",
        "name": "values"
      }
    ],
    "examples": [
      "_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n// => [2, 3, 4]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of filtered values."
      }
    ],
    "category": "Array",
    "codeName": "without"
  },
  {
    "id": "_.xor",
    "name": "xor",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array that is the symmetric difference of the provided arrays.\nSee [Wikipedia](http://en.wikipedia.org/wiki/Symmetric_difference) for\nmore details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arrays to inspect.",
        "name": "arrays"
      }
    ],
    "examples": [
      "_.xor([1, 2, 3], [5, 2, 1, 4]);\n// => [3, 5, 4]\n\n_.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);\n// => [1, 4, 5]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of values."
      }
    ],
    "category": "Array",
    "codeName": "xor"
  },
  {
    "id": "_.zip",
    "name": "zip",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of grouped elements, the first of which contains the first\nelements of the given arrays, the second of which contains the second elements\nof the given arrays, and so on.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arrays to process.",
        "name": "arrays"
      }
    ],
    "examples": [
      "_.zip(['fred', 'barney'], [30, 40], [true, false]);\n// => [['fred', 30, true], ['barney', 40, false]]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of grouped elements."
      }
    ],
    "category": "Array",
    "codeName": "zip"
  },
  {
    "id": "_.object",
    "name": "object",
    "scope": "static",
    "kind": "function",
    "description": "Creates an object composed from arrays of property names and values. Provide\neither a single two dimensional array, e.g. `[[key1, value1], [key2, value2]]`\nor two arrays, one of property names and one of corresponding values.",
    "memberof": "_",
    "alias": "object",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "The property names.",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "optional": true,
        "defaultvalue": "[]",
        "description": "The property values.",
        "name": "values"
      }
    ],
    "examples": [
      "_.zipObject(['fred', 'barney'], [30, 40]);\n// => { 'fred': 30, 'barney': 40 }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new object."
      }
    ],
    "category": "Array",
    "codeName": "zipObject"
  },
  {
    "id": "_.chain",
    "name": "chain",
    "scope": "static",
    "kind": "function",
    "description": "Creates a `lodash` object that wraps `value` with explicit method\nchaining enabled.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to wrap.",
        "name": "value"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n\nvar youngest = _.chain(users)\n  .sortBy('age')\n  .map(function(chr) { return chr.user + ' is ' + chr.age; })\n  .first()\n  .value();\n// => 'pebbles is 1'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new `lodash` object."
      }
    ],
    "category": "Chain",
    "codeName": "chain"
  },
  {
    "id": "_.tap",
    "name": "tap",
    "scope": "static",
    "kind": "function",
    "description": "This method invokes `interceptor` and returns `value`. The interceptor is\nbound to `thisArg` and invoked with one argument; (value). The purpose of\nthis method is to \"tap into\" a method chain in order to perform operations\non intermediate results within the chain.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to provide to `interceptor`.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to invoke.",
        "name": "interceptor"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `interceptor`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_([1, 2, 3])\n .tap(function(array) { array.pop(); })\n .reverse()\n .value();\n// => [2, 1]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns `value`."
      }
    ],
    "category": "Chain",
    "codeName": "tap"
  },
  {
    "id": "_.thru",
    "name": "thru",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.tap` except that it returns the result of `interceptor`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to provide to `interceptor`.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to invoke.",
        "name": "interceptor"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `interceptor`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_([1, 2, 3])\n .last()\n .thru(function(value) { return [value]; })\n .value();\n// => [3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the result of `interceptor`."
      }
    ],
    "category": "Chain",
    "codeName": "thru"
  },
  {
    "id": "_.chain",
    "name": "chain",
    "scope": "static",
    "kind": "member",
    "description": "Enables explicit method chaining on the wrapper object.",
    "memberof": "_",
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// without explicit chaining\n_(users).first();\n// => { 'user': 'barney', 'age': 36 }\n\n// with explicit chaining\n_(users).chain()\n  .first()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the `lodash` object."
      }
    ],
    "category": "Chain"
  },
  {
    "id": "_.reverse",
    "name": "reverse",
    "scope": "static",
    "kind": "member",
    "description": "Reverses the wrapped array so the first element becomes the last, the\nsecond element becomes the second to last, and so on.\n\n**Note:** This method mutates the wrapped array.",
    "memberof": "_",
    "examples": [
      "var array = [1, 2, 3];\n\n_(array).reverse().value()\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new reversed `lodash` object."
      }
    ],
    "category": "Chain"
  },
  {
    "id": "_.toString",
    "name": "toString",
    "scope": "static",
    "kind": "member",
    "description": "Produces the result of coercing the unwrapped value to a string.",
    "memberof": "_",
    "examples": [
      "_([1, 2, 3]).toString();\n// => '1,2,3'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the coerced string value."
      }
    ],
    "category": "Chain"
  },
  {
    "id": "_.value",
    "name": "value",
    "scope": "static",
    "kind": "member",
    "description": "Executes the chained sequence to extract the unwrapped value.",
    "memberof": "_",
    "alias": "toJSON, valueOf",
    "examples": [
      "_([1, 2, 3]).value();\n// => [1, 2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the resolved unwrapped value."
      }
    ],
    "category": "Chain"
  },
  {
    "id": "_.at",
    "name": "at",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of elements corresponding to the specified keys, or indexes,\nof `collection`. Keys may be specified as individual arguments or as arrays\nof keys.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "number",
            "Array.<number>",
            "string",
            "Array.<string>"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The property names\n or indexes of elements to pick, specified individually or in arrays.",
        "name": "props"
      }
    ],
    "examples": [
      "_.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n// => ['a', 'c', 'e']\n\n_.at(['fred', 'barney', 'pebbles'], 0, 2);\n// => ['fred', 'pebbles']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of picked elements."
      }
    ],
    "category": "Collection",
    "codeName": "at"
  },
  {
    "id": "_.contains, include",
    "name": " include",
    "kind": "function",
    "description": "Checks if `value` is in `collection` using `SameValueZero` for equality\ncomparisons. If `fromIndex` is negative, it is used as the offset from\nthe end of `collection`.\n\n**Note:** `SameValueZero` comparisons are like strict equality comparisons,\ne.g. `===`, except that `NaN` matches `NaN`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)\nfor more details.",
    "memberof": "_.contains",
    "alias": "contains, include",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to search.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to search for.",
        "name": "target"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The index to search from.",
        "name": "fromIndex"
      }
    ],
    "examples": [
      "_.includes([1, 2, 3], 1);\n// => true\n\n_.includes([1, 2, 3], 1, 2);\n// => false\n\n_.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n// => true\n\n_.includes('pebbles', 'eb');\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if a matching element is found, else `false`."
      }
    ],
    "category": "Collection",
    "codeName": "includes"
  },
  {
    "id": "_.countBy",
    "name": "countBy",
    "scope": "static",
    "kind": "member",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` through `iteratee`. The corresponding value\nof each key is the number of times the key was returned by `iteratee`.\nThe `iteratee` is bound to `thisArg` and invoked with three arguments;\n(value, index|key, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.countBy([4.3, 6.1, 6.4], function(n) { return Math.floor(n); });\n// => { '4': 1, '6': 2 }\n\n_.countBy([4.3, 6.1, 6.4], function(n) { return this.floor(n); }, Math);\n// => { '4': 1, '6': 2 }\n\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the composed aggregate object."
      }
    ],
    "category": "Collection",
    "codeName": "countBy"
  },
  {
    "id": "_.all",
    "name": "all",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `predicate` returns truthy for **all** elements of `collection`.\nThe predicate is bound to `thisArg` and invoked with three arguments;\n(value, index|key, collection).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "alias": "all",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.every([true, 1, null, 'yes']);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// using \"_.pluck\" callback shorthand\n_.every(users, 'age');\n// => true\n\n// using \"_.where\" callback shorthand\n_.every(users, { 'age': 36 });\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if all elements pass the predicate check,\n else `false`."
      }
    ],
    "category": "Collection",
    "codeName": "every"
  },
  {
    "id": "_.select",
    "name": "select",
    "scope": "static",
    "kind": "function",
    "description": "Iterates over elements of `collection`, returning an array of all elements\n`predicate` returns truthy for. The predicate is bound to `thisArg` and\ninvoked with three arguments; (value, index|key, collection).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "alias": "select",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var evens = _.filter([1, 2, 3, 4], function(n) { return n % 2 == 0; });\n// => [2, 4]\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.filter(users, 'active'), 'user');\n// => ['fred']\n\n// using \"_.where\" callback shorthand\n_.pluck(_.filter(users, { 'age': 36 }), 'user');\n// => ['barney']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new filtered array."
      }
    ],
    "category": "Collection",
    "codeName": "filter"
  },
  {
    "id": "_.detect",
    "name": "detect",
    "scope": "static",
    "kind": "function",
    "description": "Iterates over elements of `collection`, returning the first element\n`predicate` returns truthy for. The predicate is bound to `thisArg` and\ninvoked with three arguments; (value, index|key, collection).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "alias": "detect",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to search.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.result(_.find(users, function(chr) { return chr.age < 40; }), 'user');\n// => 'barney'\n\n// using \"_.where\" callback shorthand\n_.result(_.find(users, { 'age': 1 }), 'user');\n// => 'pebbles'\n\n// using \"_.pluck\" callback shorthand\n_.result(_.find(users, 'active'), 'user');\n// => 'fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the matched element, else `undefined`."
      }
    ],
    "category": "Collection",
    "codeName": "find"
  },
  {
    "id": "_.findLast",
    "name": "findLast",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.find` except that it iterates over elements of\n`collection` from right to left.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to search.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.findLast([1, 2, 3, 4], function(n) { return n % 2 == 1; });\n// => 3"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the matched element, else `undefined`."
      }
    ],
    "category": "Collection",
    "codeName": "findLast"
  },
  {
    "id": "_.findWhere",
    "name": "findWhere",
    "scope": "static",
    "kind": "function",
    "description": "Performs a deep comparison between each element in `collection` and the\nsource object, returning the first element that has equivalent property\nvalues.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to search.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object of property values to match.",
        "name": "source"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36, 'status': 'busy' },\n  { 'user': 'fred',   'age': 40, 'status': 'busy' }\n];\n\n_.result(_.findWhere(users, { 'status': 'busy' }), 'user');\n// => 'barney'\n\n_.result(_.findWhere(users, { 'age': 40 }), 'user');\n// => 'fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the matched element, else `undefined`."
      }
    ],
    "category": "Collection",
    "codeName": "findWhere"
  },
  {
    "id": "_.each",
    "name": "each",
    "scope": "static",
    "kind": "function",
    "description": "Iterates over elements of `collection` invoking `iteratee` for each element.\nThe `iteratee` is bound to `thisArg` and invoked with three arguments;\n(value, index|key, collection). Iterator functions may exit iteration early\nby explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a `length` property\nare iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\nmay be used for object iteration.",
    "memberof": "_",
    "alias": "each",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_([1, 2, 3]).forEach(function(n) { console.log(n); });\n// => logs each value from left to right and returns the array\n\n_.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(n, key) { console.log(n, key); });\n// => logs each value-key pair and returns the object (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "Returns `collection`."
      }
    ],
    "category": "Collection",
    "codeName": "forEach"
  },
  {
    "id": "_.eachRight",
    "name": "eachRight",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.forEach` except that it iterates over elements of\n`collection` from right to left.",
    "memberof": "_",
    "alias": "eachRight",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_([1, 2, 3]).forEachRight(function(n) { console.log(n); }).join(',');\n// => logs each value from right to left and returns the array"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "Returns `collection`."
      }
    ],
    "category": "Collection",
    "codeName": "forEachRight"
  },
  {
    "id": "_.groupBy",
    "name": "groupBy",
    "scope": "static",
    "kind": "member",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` through `iteratee`. The corresponding value\nof each key is an array of the elements responsible for generating the key.\nThe `iteratee` is bound to `thisArg` and invoked with three arguments;\n(value, index|key, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.groupBy([4.2, 6.1, 6.4], function(n) { return Math.floor(n); });\n// => { '4': [4.2], '6': [6.1, 6.4] }\n\n_.groupBy([4.2, 6.1, 6.4], function(n) { return this.floor(n); }, Math);\n// => { '4': [4.2], '6': [6.1, 6.4] }\n\n// using \"_.pluck\" callback shorthand\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the composed aggregate object."
      }
    ],
    "category": "Collection",
    "codeName": "groupBy"
  },
  {
    "id": "_.indexBy",
    "name": "indexBy",
    "scope": "static",
    "kind": "member",
    "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` through `iteratee`. The corresponding value\nof each key is the last element responsible for generating the key. The\niteratee function is bound to `thisArg` and invoked with three arguments;\n(value, index|key, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var keyData = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n\n_.indexBy(keyData, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n\n_.indexBy(keyData, function(object) { return String.fromCharCode(object.code); });\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\n_.indexBy(keyData, function(object) { return this.fromCharCode(object.code); }, String);\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the composed aggregate object."
      }
    ],
    "category": "Collection",
    "codeName": "indexBy"
  },
  {
    "id": "_.invoke",
    "name": "invoke",
    "scope": "static",
    "kind": "function",
    "description": "Invokes the method named by `methodName` on each element in `collection`,\nreturning an array of the results of each invoked method. Any additional\narguments are provided to each invoked method. If `methodName` is a function\nit is invoked for, and `this` bound to, each element in `collection`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "string"
          ]
        },
        "description": "The name of the method to invoke or\n the function invoked per iteration.",
        "name": "methodName"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to invoke the method with.",
        "name": "args"
      }
    ],
    "examples": [
      "_.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invoke([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of results."
      }
    ],
    "category": "Collection",
    "codeName": "invoke"
  },
  {
    "id": "_.collect",
    "name": "collect",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of values by running each element in `collection` through\n`iteratee`. The `iteratee` is bound to `thisArg` and invoked with three\narguments; (value, index|key, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "alias": "collect",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.map([1, 2, 3], function(n) { return n * 3; });\n// => [3, 6, 9]\n\n_.map({ 'one': 1, 'two': 2, 'three': 3 }, function(n) { return n * 3; });\n// => [3, 6, 9] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// using \"_.pluck\" callback shorthand\n_.map(users, 'user');\n// => ['barney', 'fred']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new mapped array."
      }
    ],
    "category": "Collection",
    "codeName": "map"
  },
  {
    "id": "_.max",
    "name": "max",
    "scope": "static",
    "kind": "function",
    "description": "Retrieves the maximum value of `collection`. If `collection` is empty or\nfalsey `-Infinity` is returned. If an iteratee function is provided it is\ninvoked for each value in `collection` to generate the criterion by which\nthe value is ranked. The `iteratee` is bound to `thisArg` and invoked with\nthree arguments; (value, index, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "description": "The function invoked per iteration.\n If a property name or object is provided it is used to create a \"_.pluck\"\n or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.max([4, 2, 8, 6]);\n// => 8\n\n_.max([]);\n// => -Infinity\n\nvar users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n_.max(users, function(chr) { return chr.age; });\n// => { 'user': 'fred', 'age': 40 };\n\n// using \"_.pluck\" callback shorthand\n_.max(users, 'age');\n// => { 'user': 'fred', 'age': 40 };"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the maximum value."
      }
    ],
    "category": "Collection",
    "codeName": "max"
  },
  {
    "id": "_.min",
    "name": "min",
    "scope": "static",
    "kind": "function",
    "description": "Retrieves the minimum value of `collection`. If `collection` is empty or\nfalsey `Infinity` is returned. If an iteratee function is provided it is\ninvoked for each value in `collection` to generate the criterion by which\nthe value is ranked. The `iteratee` is bound to `thisArg` and invoked with\nthree arguments; (value, index, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "description": "The function invoked per iteration.\n If a property name or object is provided it is used to create a \"_.pluck\"\n or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.min([4, 2, 8, 6]);\n// => 2\n\n_.min([]);\n// => Infinity\n\nvar users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n_.min(users, function(chr) { return chr.age; });\n// => { 'user': 'barney', 'age': 36 };\n\n// using \"_.pluck\" callback shorthand\n_.min(users, 'age');\n// => { 'user': 'barney', 'age': 36 };"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the minimum value."
      }
    ],
    "category": "Collection",
    "codeName": "min"
  },
  {
    "id": "_.partition",
    "name": "partition",
    "scope": "static",
    "kind": "member",
    "description": "Creates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, while the second of which\ncontains elements `predicate` returns falsey for. The predicate is bound\nto `thisArg` and invoked with three arguments; (value, index|key, collection).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.partition([1, 2, 3], function(n) { return n % 2; });\n// => [[1, 3], [2]]\n\n_.partition([1.2, 2.3, 3.4], function(n) { return this.floor(n) % 2; }, Math);\n// => [[1, 3], [2]]\n\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n// using \"_.where\" callback shorthand\n_.map(_.partition(users, { 'age': 1 }), function(array) { return _.pluck(array, 'user'); });\n// => [['pebbles'], ['barney', 'fred']]\n\n// using \"_.pluck\" callback shorthand\n_.map(_.partition(users, 'active'), function(array) { return _.pluck(array, 'user'); });\n// => [['fred'], ['barney', 'pebbles']]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of grouped elements."
      }
    ],
    "category": "Collection",
    "codeName": "partition"
  },
  {
    "id": "_.pluck",
    "name": "pluck",
    "scope": "static",
    "kind": "function",
    "description": "Retrieves the value of a specified property from all elements in `collection`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the property to pluck.",
        "name": "key"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n_.pluck(users, 'user');\n// => ['barney', 'fred']\n\nvar userIndex = _.indexBy(users, 'user');\n_.pluck(userIndex, 'age');\n// => [36, 40] (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the property values."
      }
    ],
    "category": "Collection",
    "codeName": "pluck"
  },
  {
    "id": "_.foldl, inject",
    "name": " inject",
    "kind": "function",
    "description": "Reduces `collection` to a value which is the accumulated result of running\neach element in `collection` through `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not provided the first element of `collection` is used as the initial\nvalue. The `iteratee` is bound to `thisArg`and invoked with four arguments;\n(accumulator, value, index|key, collection).",
    "memberof": "_.foldl",
    "alias": "foldl, inject",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The initial value.",
        "name": "accumulator"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var sum = _.reduce([1, 2, 3], function(sum, n) { return sum + n; });\n// => 6\n\nvar mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, n, key) {\n  result[key] = n * 3;\n  return result;\n}, {});\n// => { 'a': 3, 'b': 6, 'c': 9 } (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the accumulated value."
      }
    ],
    "category": "Collection",
    "codeName": "reduce"
  },
  {
    "id": "_.foldr",
    "name": "foldr",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.reduce` except that it iterates over elements of\n`collection` from right to left.",
    "memberof": "_",
    "alias": "foldr",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The initial value.",
        "name": "accumulator"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var array = [[0, 1], [2, 3], [4, 5]];\n_.reduceRight(array, function(flattened, other) { return flattened.concat(other); }, []);\n// => [4, 5, 2, 3, 0, 1]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the accumulated value."
      }
    ],
    "category": "Collection",
    "codeName": "reduceRight"
  },
  {
    "id": "_.reject",
    "name": "reject",
    "scope": "static",
    "kind": "function",
    "description": "The opposite of `_.filter`; this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var odds = _.reject([1, 2, 3, 4], function(n) { return n % 2 == 0; });\n// => [1, 3]\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.reject(users, 'active'), 'user');\n// => ['barney']\n\n// using \"_.where\" callback shorthand\n_.pluck(_.reject(users, { 'age': 36 }), 'user');\n// => ['fred']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new filtered array."
      }
    ],
    "category": "Collection",
    "codeName": "reject"
  },
  {
    "id": "_.sample",
    "name": "sample",
    "scope": "static",
    "kind": "function",
    "description": "Retrieves a random element or `n` random elements from a collection.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to sample.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "The number of elements to sample.",
        "name": "n"
      }
    ],
    "examples": [
      "_.sample([1, 2, 3, 4]);\n// => 2\n\n_.sample([1, 2, 3, 4], 2);\n// => [3, 1]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the random sample(s)."
      }
    ],
    "category": "Collection",
    "codeName": "sample",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.shuffle",
    "name": "shuffle",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of shuffled values, using a version of the Fisher-Yates\nshuffle. See [Wikipedia](http://en.wikipedia.org/wiki/Fisher-Yates_shuffle)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to shuffle.",
        "name": "collection"
      }
    ],
    "examples": [
      "_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new shuffled array."
      }
    ],
    "category": "Collection",
    "codeName": "shuffle"
  },
  {
    "id": "_.size",
    "name": "size",
    "scope": "static",
    "kind": "function",
    "description": "Gets the size of `collection` by returning `collection.length` for\narray-like values or the number of own enumerable properties for objects.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to inspect.",
        "name": "collection"
      }
    ],
    "examples": [
      "_.size([1, 2]);\n// => 2\n\n_.size({ 'one': 1, 'two': 2, 'three': 3 });\n// => 3\n\n_.size('pebbles');\n// => 7"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns `collection.length` or number of own enumerable properties."
      }
    ],
    "category": "Collection",
    "codeName": "size"
  },
  {
    "id": "_.any",
    "name": "any",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `predicate` returns truthy for **any** element of `collection`.\nThe function returns as soon as it finds a passing value and does not iterate\nover the entire collection. The predicate is bound to `thisArg` and invoked\nwith three arguments; (value, index|key, collection).\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "alias": "any",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n// using \"_.pluck\" callback shorthand\n_.some(users, 'active');\n// => true\n\n// using \"_.where\" callback shorthand\n_.some(users, { 'age': 1 });\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if any element passes the predicate check,\n else `false`."
      }
    ],
    "category": "Collection",
    "codeName": "some"
  },
  {
    "id": "_.sortBy",
    "name": "sortBy",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection through `iteratee`. This method performs\na stable sort, that is, it preserves the original sort order of equal elements.\nThe `iteratee` is bound to `thisArg` and invoked with three arguments;\n(value, index|key, collection).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "Array",
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function\n invoked per iteration. If a property name or an object is provided it is\n used to create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.sortBy([1, 2, 3], function(n) { return Math.sin(n); });\n// => [3, 1, 2]\n\n_.sortBy([1, 2, 3], function(n) { return this.sin(n); }, Math);\n// => [3, 1, 2]\n\nvar users = [\n  { 'user': 'fred' },\n  { 'user': 'pebbles' },\n  { 'user': 'barney' }\n];\n\n// using \"_.pluck\" callback shorthand\n_.pluck(_.sortBy(users, 'user'), 'user');\n// => ['barney', 'fred', 'pebbles']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new sorted array."
      }
    ],
    "category": "Collection",
    "codeName": "sortBy"
  },
  {
    "id": "_.sortByAll",
    "name": "sortByAll",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.sortBy` except that it sorts by property names\ninstead of an iteratee function.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to iterate over.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "variable": true,
        "description": "The property names to sort by,\n specified as individual property names or arrays of property names.",
        "name": "props"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 26 },\n  { 'user': 'fred',   'age': 30 }\n];\n\n_.map(_.sortByAll(users, ['user', 'age']), _.values);\n// => [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new sorted array."
      }
    ],
    "category": "Collection",
    "codeName": "sortByAll"
  },
  {
    "id": "_.toArray",
    "name": "toArray",
    "scope": "static",
    "kind": "function",
    "description": "Converts `collection` to an array.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to convert.",
        "name": "collection"
      }
    ],
    "examples": [
      "(function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n// => [2, 3, 4]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new converted array."
      }
    ],
    "category": "Collection",
    "codeName": "toArray"
  },
  {
    "id": "_.where",
    "name": "where",
    "scope": "static",
    "kind": "function",
    "description": "Performs a deep comparison between each element in `collection` and the\nsource object, returning an array of all elements that have equivalent\nproperty values.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The collection to search.",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object of property values to match.",
        "name": "source"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36, 'status': 'busy', 'pets': ['hoppy'] },\n  { 'user': 'fred',   'age': 40, 'status': 'busy', 'pets': ['baby puss', 'dino'] }\n];\n\n_.pluck(_.where(users, { 'age': 36 }), 'user');\n// => ['barney']\n\n_.pluck(_.where(users, { 'pets': ['dino'] }), 'user');\n// => ['fred']\n\n_.pluck(_.where(users, { 'status': 'busy' }), 'user');\n// => ['barney', 'fred']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new filtered array."
      }
    ],
    "category": "Collection",
    "codeName": "where"
  },
  {
    "id": "_.now",
    "name": "now",
    "scope": "static",
    "kind": "member",
    "description": "Gets the number of milliseconds that have elapsed since the Unix epoch\n(1 January 1970 00:00:00 UTC).",
    "memberof": "_",
    "examples": [
      "_.defer(function(stamp) { console.log(_.now() - stamp); }, _.now());\n// => logs the number of milliseconds it took for the deferred function to be invoked"
    ],
    "category": "Date",
    "codeName": "now"
  },
  {
    "id": "_.after",
    "name": "after",
    "scope": "static",
    "kind": "function",
    "description": "The opposite of `_.before`; this method creates a function that invokes\n`func` once it is called `n` or more times.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of calls before `func` is invoked.",
        "name": "n"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to restrict.",
        "name": "func"
      }
    ],
    "examples": [
      "var saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => logs 'done saving!' after the two async saves have completed"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new restricted function."
      }
    ],
    "category": "Function",
    "codeName": "after"
  },
  {
    "id": "_.ary",
    "name": "ary",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that accepts up to `n` arguments ignoring any\nadditional arguments.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to cap arguments for.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "func.length",
        "description": "The arity cap.",
        "name": "n"
      }
    ],
    "examples": [
      "_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Function",
    "codeName": "ary",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.before",
    "name": "before",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it is called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of calls at which `func` is no longer invoked.",
        "name": "n"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to restrict.",
        "name": "func"
      }
    ],
    "examples": [
      "jQuery('#add').on('click', _.before(5, addContactToList));\n// => allows adding up to 4 contacts to the list"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new restricted function."
      }
    ],
    "category": "Function",
    "codeName": "before"
  },
  {
    "id": "_.bind",
    "name": "bind",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that invokes `func` with the `this` binding of `thisArg`\nand prepends any additional `_.bind` arguments to those provided to the\nbound function.\n\nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n\n**Note:** Unlike native `Function#bind` this method does not set the `length`\nproperty of bound functions.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to bind.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `func`.",
        "name": "thisArg"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to be partially applied.",
        "name": "args"
      }
    ],
    "examples": [
      "var greet = function(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n};\n\nvar object = { 'user': 'fred' };\n\nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// using placeholders\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new bound function."
      }
    ],
    "category": "Function",
    "codeName": "bind"
  },
  {
    "id": "_.bindAll",
    "name": "bindAll",
    "scope": "static",
    "kind": "function",
    "description": "Binds methods of an object to the object itself, overwriting the existing\nmethod. Method names may be specified as individual arguments or as arrays\nof method names. If no method names are provided all enumerable function\nproperties, own and inherited, of `object` are bound.\n\n**Note:** This method does not set the `length` property of bound functions.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to bind and assign the bound methods to.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The object method names to bind,\n specified as individual method names or arrays of method names.",
        "name": "methodNames"
      }
    ],
    "examples": [
      "var view = {\n  'label': 'docs',\n  'onClick': function() { console.log('clicked ' + this.label); }\n};\n\n_.bindAll(view);\njQuery('#docs').on('click', view.onClick);\n// => logs 'clicked docs' when the element is clicked"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns `object`."
      }
    ],
    "category": "Function",
    "codeName": "bindAll"
  },
  {
    "id": "_.bindKey",
    "name": "bindKey",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that invokes the method at `object[key]` and prepends\nany additional `_.bindKey` arguments to those provided to the bound function.\n\nThis method differs from `_.bind` by allowing bound functions to reference\nmethods that may be redefined or don't yet exist.\nSee [Peter Michaux's article](http://michaux.ca/articles/lazy-function-definition-pattern)\nfor more details.\n\nThe `_.bindKey.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object the method belongs to.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the method.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to be partially applied.",
        "name": "args"
      }
    ],
    "examples": [
      "var object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n\nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// using placeholders\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new bound function."
      }
    ],
    "category": "Function",
    "codeName": "bindKey"
  },
  {
    "id": "_.curry",
    "name": "curry",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that accepts one or more arguments of `func` that when\ncalled either invokes `func` returning its result, if all `func` arguments\nhave been provided, or returns a function that accepts one or more of the\nremaining `func` arguments, and so on. The arity of `func` can be specified\nif `func.length` is not sufficient.\n\nThe `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for provided arguments.\n\n**Note:** This method does not set the `length` property of curried functions.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to curry.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "func.length",
        "description": "The arity of `func`.",
        "name": "arity"
      }
    ],
    "examples": [
      "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// using placeholders\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new curried function."
      }
    ],
    "category": "Function",
    "codeName": "curry",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.curryRight",
    "name": "curryRight",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.curry` except that arguments are applied to `func`\nin the manner of `_.partialRight` instead of `_.partial`.\n\nThe `_.curryRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for provided arguments.\n\n**Note:** This method does not set the `length` property of curried functions.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to curry.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "func.length",
        "description": "The arity of `func`.",
        "name": "arity"
      }
    ],
    "examples": [
      "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// using placeholders\ncurried(3)(1, _)(2);\n// => [1, 2, 3]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new curried function."
      }
    ],
    "category": "Function",
    "codeName": "curryRight",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.debounce",
    "name": "debounce",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that delays invoking `func` until after `wait` milliseconds\nhave elapsed since the last time it was invoked. The created function comes\nwith a `cancel` method to cancel delayed invocations. Provide an options\nobject to indicate that `func` should be invoked on the leading and/or\ntrailing edge of the `wait` timeout. Subsequent calls to the debounced\nfunction return the result of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is invoked\non the trailing edge of the timeout only if the the debounced function is\ninvoked more than once during the `wait` timeout.\n\nSee [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\nfor details over the differences between `_.debounce` and `_.throttle`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to debounce.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of milliseconds to delay.",
        "name": "wait"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The options object.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "false",
        "description": "Specify invoking on the leading\n edge of the timeout.",
        "name": "options.leading"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "The maximum time `func` is allowed to be\n delayed before it is invoked.",
        "name": "options.maxWait"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "true",
        "description": "Specify invoking on the trailing\n edge of the timeout.",
        "name": "options.trailing"
      }
    ],
    "examples": [
      "// avoid costly calculations while the window size is in flux\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\n// invoke `sendMail` when the click event is fired, debouncing subsequent calls\njQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n});\n\n// ensure `batchLog` is invoked once after 1 second of debounced calls\nvar source = new EventSource('/stream');\njQuery(source).on('message', _.debounce(batchLog, 250, {\n  'maxWait': 1000\n}, false);\n\n// cancel a debounced call\nvar todoChanges = _.debounce(batchLog, 1000);\nObject.observe(models.todo, todoChanges);\n\nObject.observe(models, function(changes) {\n  if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {\n    todoChanges.cancel();\n  }\n}, ['delete']);\n\n// ...at some point `models.todo` is changed\nmodels.todo.completed = true;\n\n// ...before 1 second has passed `models.todo` is deleted\n// which cancels the debounced `todoChanges` call\ndelete models.todo;"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new debounced function."
      }
    ],
    "category": "Function",
    "codeName": "debounce"
  },
  {
    "id": "_.defer",
    "name": "defer",
    "scope": "static",
    "kind": "function",
    "description": "Defers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it is invoked.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to defer.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to invoke the function with.",
        "name": "args"
      }
    ],
    "examples": [
      "_.defer(function(text) { console.log(text); }, 'deferred');\n// logs 'deferred' after one or more milliseconds"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the timer id."
      }
    ],
    "category": "Function",
    "codeName": "defer"
  },
  {
    "id": "_.delay",
    "name": "delay",
    "scope": "static",
    "kind": "function",
    "description": "Invokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it is invoked.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to delay.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of milliseconds to delay invocation.",
        "name": "wait"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to invoke the function with.",
        "name": "args"
      }
    ],
    "examples": [
      "_.delay(function(text) { console.log(text); }, 1000, 'later');\n// => logs 'later' after one second"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the timer id."
      }
    ],
    "category": "Function",
    "codeName": "delay"
  },
  {
    "id": "_.flow",
    "name": "flow",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that returns the result of invoking the provided\nfunctions with the `this` binding of the created function, where each\nsuccessive invocation is supplied the return value of the previous.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "Functions to invoke.",
        "name": "funcs"
      }
    ],
    "examples": [
      "function add(x, y) {\n  return x + y;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flow(add, square);\naddSquare(1, 2);\n// => 9"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Function",
    "codeName": "flow"
  },
  {
    "id": "_.backflow, compose",
    "name": " compose",
    "kind": "function",
    "description": "This method is like `_.flow` except that it creates a function that\ninvokes the provided functions from right to left.",
    "memberof": "_.backflow",
    "alias": "backflow, compose",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "Functions to invoke.",
        "name": "funcs"
      }
    ],
    "examples": [
      "function add(x, y) {\n  return x + y;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flowRight(square, add);\naddSquare(1, 2);\n// => 9"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Function",
    "codeName": "flowRight"
  },
  {
    "id": "_.memoize",
    "name": "memoize",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that memoizes the result of `func`. If `resolver` is\nprovided it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is coerced to a string and used as the\ncache key. The `func` is invoked with the `this` binding of the memoized\nfunction.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `_.memoize.Cache`\nconstructor with one whose instances implement the ES6 `Map` method interface\nof `get`, `has`, and `set`. See the\n[ES6 spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to have its output memoized.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to resolve the cache key.",
        "name": "resolver"
      }
    ],
    "examples": [
      "var fibonacci = _.memoize(function(n) {\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n});\n\nfibonacci(9)\n// => 34\n\n// modifying the result cache\nvar upperCase = _.memoize(function(string) {\n  return string.toUpperCase();\n});\n\nupperCase('fred');\n// => 'FRED'\n\nupperCase.cache.set('fred, 'BARNEY');\nupperCase('fred');\n// => 'BARNEY'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new memoizing function."
      }
    ],
    "category": "Function",
    "codeName": "memoize"
  },
  {
    "id": "_.negate",
    "name": "negate",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The predicate to negate.",
        "name": "predicate"
      }
    ],
    "examples": [
      "function isEven(n) {\n  return n % 2 == 0;\n}\n\n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Function",
    "codeName": "negate"
  },
  {
    "id": "_.once",
    "name": "once",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first call. The `func` is invoked\nwith the `this` binding of the created function.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to restrict.",
        "name": "func"
      }
    ],
    "examples": [
      "var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// `initialize` invokes `createApplication` once"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new restricted function."
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "category": "Function",
    "codeName": "once"
  },
  {
    "id": "_.partial",
    "name": "partial",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that invokes `func` with `partial` arguments prepended\nto those provided to the new function. This method is like `_.bind` except\nit does **not** alter the `this` binding.\n\nThe `_.partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method does not set the `length` property of partially\napplied functions.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to partially apply arguments to.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to be partially applied.",
        "name": "args"
      }
    ],
    "examples": [
      "var greet = function(greeting, name) {\n  return greeting + ' ' + name;\n};\n\nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// using placeholders\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new partially applied function."
      }
    ],
    "category": "Function",
    "codeName": "partial"
  },
  {
    "id": "_.partialRight",
    "name": "partialRight",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.partial` except that partially applied arguments\nare appended to those provided to the new function.\n\nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method does not set the `length` property of partially\napplied functions.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to partially apply arguments to.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The arguments to be partially applied.",
        "name": "args"
      }
    ],
    "examples": [
      "var greet = function(greeting, name) {\n  return greeting + ' ' + name;\n};\n\nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// using placeholders\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new partially applied function."
      }
    ],
    "category": "Function",
    "codeName": "partialRight"
  },
  {
    "id": "_.rearg",
    "name": "rearg",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that invokes `func` with arguments arranged according\nto the specified indexes where the argument value at the first index is\nprovided as the first argument, the argument value at the second index is\nprovided as the second argument, and so on.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to rearrange arguments for.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number",
            "Array.<number>"
          ]
        },
        "variable": true,
        "description": "The arranged argument indexes,\n specified as individual indexes or arrays of indexes.",
        "name": "indexes"
      }
    ],
    "examples": [
      "var rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, 2, 0, 1);\n\nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']\n\nvar map = _.rearg(_.map, [1, 0]);\nmap(function(n) { return n * 3; }, [1, 2, 3]);\n// => [3, 6, 9]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Function",
    "codeName": "rearg"
  },
  {
    "id": "_.throttle",
    "name": "throttle",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that only invokes `func` at most once per every `wait`\nmilliseconds. The created function comes with a `cancel` method to cancel\ndelayed invocations. Provide an options object to indicate that `func`\nshould be invoked on the leading and/or trailing edge of the `wait` timeout.\nSubsequent calls to the throttled function return the result of the last\n`func` call.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is invoked\non the trailing edge of the timeout only if the the throttled function is\ninvoked more than once during the `wait` timeout.\n\nSee [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\nfor details over the differences between `_.throttle` and `_.debounce`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to throttle.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of milliseconds to throttle invocations to.",
        "name": "wait"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The options object.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "true",
        "description": "Specify invoking on the leading\n edge of the timeout.",
        "name": "options.leading"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "true",
        "description": "Specify invoking on the trailing\n edge of the timeout.",
        "name": "options.trailing"
      }
    ],
    "examples": [
      "// avoid excessively updating the position while scrolling\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\n// invoke `renewToken` when the click event is fired, but not more than once every 5 minutes\nvar throttled =  _.throttle(renewToken, 300000, { 'trailing': false })\njQuery('.interactive').on('click', throttled);\n\n// cancel a trailing throttled call\njQuery(window).on('popstate', throttled.cancel);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new throttled function."
      }
    ],
    "category": "Function",
    "codeName": "throttle"
  },
  {
    "id": "_.wrap",
    "name": "wrap",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that provides `value` to the wrapper function as its\nfirst argument. Any additional arguments provided to the function are\nappended to those provided to the wrapper function. The wrapper is invoked\nwith the `this` binding of the created function.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to wrap.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The wrapper function.",
        "name": "wrapper"
      }
    ],
    "examples": [
      "var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Function",
    "codeName": "wrap"
  },
  {
    "id": "_.clone",
    "name": "clone",
    "scope": "static",
    "kind": "function",
    "description": "Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,\notherwise they are assigned by reference. If `customizer` is provided it is\ninvoked to produce the cloned values. If `customizer` returns `undefined`\ncloning is handled by the method instead. The `customizer` is bound to\n`thisArg` and invoked with two argument; (value, index|key).\n\n**Note:** This method is loosely based on the structured clone algorithm.\nThe enumerable properties of `arguments` objects and objects created by\nconstructors other than `Object` are cloned to plain `Object` objects. An\nempty object is returned for uncloneable values such as functions, DOM nodes,\nMaps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to clone.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Specify a deep clone.",
        "name": "isDeep"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to customize cloning values.",
        "name": "customizer"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `customizer`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\nvar shallow = _.clone(users);\nshallow[0] === users[0];\n// => true\n\nvar deep = _.clone(users, true);\ndeep[0] === users[0];\n// => false\n\n_.mixin({\n  'clone': _.partialRight(_.clone, function(value) {\n    return _.isElement(value) ? value.cloneNode(false) : undefined;\n  })\n});\n\nvar clone = _.clone(document.body);\nclone.childNodes.length;\n// => 0"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the cloned value."
      }
    ],
    "category": "Lang",
    "codeName": "clone"
  },
  {
    "id": "_.cloneDeep",
    "name": "cloneDeep",
    "scope": "static",
    "kind": "function",
    "description": "Creates a deep clone of `value`. If `customizer` is provided it is invoked\nto produce the cloned values. If `customizer` returns `undefined` cloning\nis handled by the method instead. The `customizer` is bound to `thisArg`\nand invoked with two argument; (value, index|key).\n\n**Note:** This method is loosely based on the structured clone algorithm.\nThe enumerable properties of `arguments` objects and objects created by\nconstructors other than `Object` are cloned to plain `Object` objects. An\nempty object is returned for uncloneable values such as functions, DOM nodes,\nMaps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to deep clone.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to customize cloning values.",
        "name": "customizer"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `customizer`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\nvar deep = _.cloneDeep(users);\ndeep[0] === users[0];\n// => false\n\nvar view = {\n  'label': 'docs',\n  'node': element\n};\n\nvar clone = _.cloneDeep(view, function(value) {\n  return _.isElement(value) ? value.cloneNode(true) : undefined;\n});\n\nclone.node == view.node;\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the deep cloned value."
      }
    ],
    "category": "Lang",
    "codeName": "cloneDeep"
  },
  {
    "id": "_.isArguments",
    "name": "isArguments",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as an `arguments` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "(function() { return _.isArguments(arguments); })();\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isArguments"
  },
  {
    "id": "_.isArray",
    "name": "isArray",
    "scope": "static",
    "kind": "member",
    "description": "Checks if `value` is classified as an `Array` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isArray([1, 2, 3]);\n// => true\n\n(function() { return _.isArray(arguments); })();\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isArray"
  },
  {
    "id": "_.isBoolean",
    "name": "isBoolean",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as a boolean primitive or object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isBoolean"
  },
  {
    "id": "_.isDate",
    "name": "isDate",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as a `Date` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isDate(new Date);\n// => true\n\n_.isDate('Mon April 23 2012');\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isDate"
  },
  {
    "id": "_.isElement",
    "name": "isElement",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is a DOM element.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isElement(document.body);\n// => true\n\n_.isElement('<body>');\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is a DOM element, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isElement"
  },
  {
    "id": "_.isEmpty",
    "name": "isEmpty",
    "scope": "static",
    "kind": "function",
    "description": "Checks if a collection is empty. A value is considered empty unless it is\nan array-like value with a length greater than `0` or an object with own\nenumerable properties.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object",
            "string"
          ]
        },
        "description": "The value to inspect.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isEmpty(null);\n// => true\n\n_.isEmpty(true);\n// => true\n\n_.isEmpty(1);\n// => true\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({ 'a': 1 });\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is empty, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isEmpty"
  },
  {
    "id": "_.isEqual",
    "name": "isEqual",
    "scope": "static",
    "kind": "function",
    "description": "Performs a deep comparison between two values to determine if they are\nequivalent. If `customizer` is provided it is invoked to compare values.\nIf `customizer` returns `undefined` comparisons are handled by the method\ninstead. The `customizer` is bound to `thisArg` and invoked with three\narguments; (value, other, key).\n\n**Note:** This method supports comparing arrays, booleans, `Date` objects,\nnumbers, `Object` objects, regexes, and strings. Functions and DOM nodes\nare **not** supported. Provide a customizer function to extend support\nfor comparing other values.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to compare to `other`.",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to compare to `value`.",
        "name": "other"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to customize comparing values.",
        "name": "customizer"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `customizer`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred' };\nvar other = { 'user': 'fred' };\n\nobject == other;\n// => false\n\n_.isEqual(object, other);\n// => true\n\nvar words = ['hello', 'goodbye'];\nvar otherWords = ['hi', 'goodbye'];\n\n_.isEqual(words, otherWords, function(value, other) {\n  return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;\n});\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if the values are equivalent, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isEqual"
  },
  {
    "id": "_.isError",
    "name": "isError",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isError(new Error);\n// => true\n\n_.isError(Error);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is an error object, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isError"
  },
  {
    "id": "_.isFinite",
    "name": "isFinite",
    "scope": "static",
    "kind": "member",
    "description": "Checks if `value` is a finite primitive number.\n\n**Note:** This method is based on ES6 `Number.isFinite`. See the\n[ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isFinite(10);\n// => true\n\n_.isFinite('10');\n// => false\n\n_.isFinite(true);\n// => false\n\n_.isFinite(Object(10));\n// => false\n\n_.isFinite(Infinity);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is a finite number, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isFinite"
  },
  {
    "id": "_.isFunction",
    "name": "isFunction",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as a `Function` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isFunction(_);\n// => true\n\n_.isFunction(/abc/);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isFunction"
  },
  {
    "id": "_.isObject",
    "name": "isObject",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is the language type of `Object`.\n(e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\n**Note:** See the [ES5 spec](http://es5.github.io/#x8) for more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(1);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is an object, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isObject"
  },
  {
    "id": "_.isMatch",
    "name": "isMatch",
    "scope": "static",
    "kind": "function",
    "description": "Performs a deep comparison between `object` and `source` to determine if\n`object` contains equivalent property values. If `customizer` is provided\nit is invoked to compare values. If `customizer` returns `undefined`\ncomparisons are handled by the method instead. The `customizer` is bound\nto `thisArg` and invoked with three arguments; (value, other, key).\n\n**Note:** This method supports comparing properties of arrays, booleans,\n`Date` objects, numbers, `Object` objects, regexes, and strings. Functions\nand DOM nodes are **not** supported. Provide a customizer function to extend\nsupport for comparing other values.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "source"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object of property values to match.",
        "name": "source"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to customize comparing values.",
        "name": "customizer"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `customizer`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred', 'age': 40 };\n\n_.isMatch(object, { 'age': 40 });\n// => true\n\n_.isMatch(object, { 'age': 36 });\n// => false\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\n_.isMatch(object, source, function(value, other) {\n  return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;\n});\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `object` is a match, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isMatch"
  },
  {
    "id": "_.isNaN",
    "name": "isNaN",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is `NaN`.\n\n**Note:** This method is not the same as native `isNaN` which returns `true`\nfor `undefined` and other non-numeric values. See the [ES5 spec](http://es5.github.io/#x15.1.2.4)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is `NaN`, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isNaN"
  },
  {
    "id": "_.isNative",
    "name": "isNative",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is a native function.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is a native function, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isNative"
  },
  {
    "id": "_.isNull",
    "name": "isNull",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is `null`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isNull(null);\n// => true\n\n_.isNull(void 0);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is `null`, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isNull"
  },
  {
    "id": "_.isNumber",
    "name": "isNumber",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as a `Number` primitive or object.\n\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\nas numbers, use the `_.isFinite` method.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isNumber(8.4);\n// => true\n\n_.isNumber(NaN);\n// => true\n\n_.isNumber('8.4');\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isNumber"
  },
  {
    "id": "_.isPlainObject",
    "name": "isPlainObject",
    "scope": "static",
    "kind": "member",
    "description": "Checks if `value` is an object created by the `Object` constructor or has\na `[[Prototype]]` of `null`.\n\n**Note:** This method assumes objects created by the `Object` constructor\nhave no inherited enumerable properties.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n_.isPlainObject(new Shape);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is a plain object, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isPlainObject"
  },
  {
    "id": "_.isRegExp",
    "name": "isRegExp",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as a `RegExp` object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isRegExp(/abc/);\n// => true\n\n_.isRegExp('/abc/');\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isRegExp"
  },
  {
    "id": "_.isString",
    "name": "isString",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is classified as a `String` primitive or object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isString('abc');\n// => true\n\n_.isString(1);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is correctly classified, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isString"
  },
  {
    "id": "_.isUndefined",
    "name": "isUndefined",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `value` is `undefined`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to check.",
        "name": "value"
      }
    ],
    "examples": [
      "_.isUndefined(void 0);\n// => true\n\n_.isUndefined(null);\n// => false"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `value` is `undefined`, else `false`."
      }
    ],
    "category": "Lang",
    "codeName": "isUndefined"
  },
  {
    "id": "_.extend",
    "name": "extend",
    "scope": "static",
    "kind": "member",
    "description": "Assigns own enumerable properties of source object(s) to the destination\nobject. Subsequent sources overwrite property assignments of previous sources.\nIf `customizer` is provided it is invoked to produce the assigned values.\nThe `customizer` is bound to `thisArg` and invoked with five arguments;\n(objectValue, sourceValue, key, object, source).",
    "memberof": "_",
    "alias": "extend",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The destination object.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The source objects.",
        "name": "sources"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to customize assigning values.",
        "name": "customizer"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `customizer`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred', 'status': 'busy' });\n// => { 'user': 'fred', 'age': 40, 'status': 'busy' }\n\nvar defaults = _.partialRight(_.assign, function(value, other) {\n  return typeof value == 'undefined' ? other : value;\n});\n\ndefaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred', 'status': 'busy' });\n// => { 'user': 'barney', 'age': 36, 'status': 'busy' }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the destination object."
      }
    ],
    "category": "Object",
    "codeName": "assign"
  },
  {
    "id": "_.create",
    "name": "create",
    "scope": "static",
    "kind": "function",
    "description": "Creates an object that inherits from the given `prototype` object. If a\n`properties` object is provided its own enumerable properties are assigned\nto the created object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inherit from.",
        "name": "prototype"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The properties to assign to the object.",
        "name": "properties"
      }
    ],
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = _.create(Shape.prototype, { 'constructor': Circle });\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new object."
      }
    ],
    "category": "Object",
    "codeName": "create",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.defaults",
    "name": "defaults",
    "scope": "static",
    "kind": "function",
    "description": "Assigns own enumerable properties of source object(s) to the destination\nobject for all destination properties that resolve to `undefined`. Once a\nproperty is set, additional defaults of the same property are ignored.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The destination object.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The source objects.",
        "name": "sources"
      }
    ],
    "examples": [
      "_.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred', 'status': 'busy' });\n// => { 'user': 'barney', 'age': 36, 'status': 'busy' }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the destination object."
      }
    ],
    "category": "Object",
    "codeName": "defaults"
  },
  {
    "id": "_.findKey",
    "name": "findKey",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.findIndex` except that it returns the key of the\nfirst element `predicate` returns truthy for, instead of the element itself.\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to search.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(chr) { return chr.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// using \"_.where\" callback shorthand\n_.findKey(users, { 'age': 1 });\n// => 'pebbles'\n\n// using \"_.pluck\" callback shorthand\n_.findKey(users, 'active');\n// => 'barney'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string",
            "undefined"
          ]
        },
        "description": "Returns the key of the matched element, else `undefined`."
      }
    ],
    "category": "Object",
    "codeName": "findKey"
  },
  {
    "id": "_.findLastKey",
    "name": "findLastKey",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.findKey` except that it iterates over elements of\na collection in the opposite order.\n\nIf a property name is provided for `predicate` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `predicate` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to search.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findLastKey(users, function(chr) { return chr.age < 40; });\n// => returns `pebbles` assuming `_.findKey` returns `barney`\n\n// using \"_.where\" callback shorthand\n_.findLastKey(users, { 'age': 40 });\n// => 'fred'\n\n// using \"_.pluck\" callback shorthand\n_.findLastKey(users, 'active');\n// => 'pebbles'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string",
            "undefined"
          ]
        },
        "description": "Returns the key of the matched element, else `undefined`."
      }
    ],
    "category": "Object",
    "codeName": "findLastKey"
  },
  {
    "id": "_.forIn",
    "name": "forIn",
    "scope": "static",
    "kind": "function",
    "description": "Iterates over own and inherited enumerable properties of an object invoking\n`iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked\nwith three arguments; (value, key, object). Iterator functions may exit\niteration early by explicitly returning `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to iterate over.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nShape.prototype.z = 0;\n\n_.forIn(new Shape, function(value, key) {\n  console.log(key);\n});\n// => logs 'x', 'y', and 'z' (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns `object`."
      }
    ],
    "category": "Object",
    "codeName": "forIn"
  },
  {
    "id": "_.forInRight",
    "name": "forInRight",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.forIn` except that it iterates over properties of\n`object` in the opposite order.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to iterate over.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nShape.prototype.z = 0;\n\n_.forInRight(new Shape, function(value, key) {\n  console.log(key);\n});\n// => logs 'z', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'z'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns `object`."
      }
    ],
    "category": "Object",
    "codeName": "forInRight"
  },
  {
    "id": "_.forOwn",
    "name": "forOwn",
    "scope": "static",
    "kind": "function",
    "description": "Iterates over own enumerable properties of an object invoking `iteratee`\nfor each property. The `iteratee` is bound to `thisArg` and invoked with\nthree arguments; (value, key, object). Iterator functions may exit iteration\nearly by explicitly returning `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to iterate over.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(n, key) {\n  console.log(key);\n});\n// => logs '0', '1', and 'length' (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns `object`."
      }
    ],
    "category": "Object",
    "codeName": "forOwn"
  },
  {
    "id": "_.forOwnRight",
    "name": "forOwnRight",
    "scope": "static",
    "kind": "function",
    "description": "This method is like `_.forOwn` except that it iterates over properties of\n`object` in the opposite order.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to iterate over.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(n, key) {\n  console.log(key);\n});\n// => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns `object`."
      }
    ],
    "category": "Object",
    "codeName": "forOwnRight"
  },
  {
    "id": "_.methods",
    "name": "methods",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of function property names from all enumerable properties,\nown and inherited, of `object`.",
    "memberof": "_",
    "alias": "methods",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "object"
      }
    ],
    "examples": [
      "_.functions(_);\n// => ['all', 'any', 'bind', ...]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of property names."
      }
    ],
    "category": "Object",
    "codeName": "functions"
  },
  {
    "id": "_.has",
    "name": "has",
    "scope": "static",
    "kind": "function",
    "description": "Checks if the specified property name exists as a direct property of `object`,\ninstead of an inherited property.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the property to check.",
        "name": "key"
      }
    ],
    "examples": [
      "_.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `key` is a direct property, else `false`."
      }
    ],
    "category": "Object",
    "codeName": "has"
  },
  {
    "id": "_.invert",
    "name": "invert",
    "scope": "static",
    "kind": "function",
    "description": "Creates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite property\nassignments of previous values unless `multiValue` is `true`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to invert.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Allow multiple values per key.",
        "name": "multiValue"
      }
    ],
    "examples": [
      "_.invert({ 'first': 'fred', 'second': 'barney' });\n// => { 'fred': 'first', 'barney': 'second' }\n\n// without `multiValue`\n_.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' });\n// => { 'fred': 'third', 'barney': 'second' }\n\n// with `multiValue`\n_.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' }, true);\n// => { 'fred': ['first', 'third'], 'barney': ['second'] }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new inverted object."
      }
    ],
    "category": "Object",
    "codeName": "invert",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.keys",
    "name": "keys",
    "scope": "static",
    "kind": "member",
    "description": "Creates an array of the own enumerable property names of `object`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "object"
      }
    ],
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nShape.prototype.z = 0;\n\n_.keys(new Shape);\n// => ['x', 'y'] (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of property names."
      }
    ],
    "category": "Object",
    "codeName": "keys"
  },
  {
    "id": "_.keysIn",
    "name": "keysIn",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of the own and inherited enumerable property names of `object`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "object"
      }
    ],
    "examples": [
      "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nShape.prototype.z = 0;\n\n_.keysIn(new Shape);\n// => ['x', 'y', 'z'] (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of property names."
      }
    ],
    "category": "Object",
    "codeName": "keysIn"
  },
  {
    "id": "_.mapValues",
    "name": "mapValues",
    "scope": "static",
    "kind": "function",
    "description": "Creates an object with the same keys as `object` and values generated by\nrunning each own enumerable property of `object` through `iteratee`. The\niteratee function is bound to `thisArg` and invoked with three arguments;\n(value, key, object).\n\nIf a property name is provided for `iteratee` the created \"_.pluck\" style\ncallback returns the property value of the given element.\n\nIf an object is provided for `iteratee` the created \"_.where\" style callback\nreturns `true` for elements that have the properties of the given object,\nelse `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to iterate over.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function",
            "Object",
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked\n per iteration. If a property name or object is provided it is used to\n create a \"_.pluck\" or \"_.where\" style callback respectively.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "_.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(n) { return n * 3; });\n// => { 'a': 3, 'b': 6, 'c': 9 }\n\nvar users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\n// using \"_.pluck\" callback shorthand\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new mapped object."
      }
    ],
    "category": "Object",
    "codeName": "mapValues"
  },
  {
    "id": "_.merge",
    "name": "merge",
    "scope": "static",
    "kind": "member",
    "description": "Recursively merges own enumerable properties of the source object(s), that\ndon't resolve to `undefined` into the destination object. Subsequent sources\noverwrite property assignments of previous sources. If `customizer` is\nprovided it is invoked to produce the merged values of the destination and\nsource properties. If `customizer` returns `undefined` merging is handled\nby the method instead. The `customizer` is bound to `thisArg` and invoked\nwith five arguments; (objectValue, sourceValue, key, object, source).",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The destination object.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "The source objects.",
        "name": "sources"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "The function to customize merging properties.",
        "name": "customizer"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `customizer`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = {\n  'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n};\n\nvar ages = {\n  'data': [{ 'age': 36 }, { 'age': 40 }]\n};\n\n_.merge(users, ages);\n// => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n\nvar food = {\n  'fruits': ['apple'],\n  'vegetables': ['beet']\n};\n\nvar otherFood = {\n  'fruits': ['banana'],\n  'vegetables': ['carrot']\n};\n\n_.merge(food, otherFood, function(a, b) {\n  return _.isArray(a) ? a.concat(b) : undefined;\n});\n// => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the destination object."
      }
    ],
    "category": "Object",
    "codeName": "merge"
  },
  {
    "id": "_.omit",
    "name": "omit",
    "scope": "static",
    "kind": "function",
    "description": "The opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable properties of `object` that are not omitted.\nProperty names may be specified as individual arguments or as arrays of\nproperty names. If `predicate` is provided it is invoked for each property\nof `object` omitting the properties `predicate` returns truthy for. The\npredicate is bound to `thisArg` and invoked with three arguments;\n(value, key, object).",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The source object.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The function invoked per\n iteration or property names to omit, specified as individual property\n names or arrays of property names.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred', 'age': 40 };\n\n_.omit(object, 'age');\n// => { 'user': 'fred' }\n\n_.omit(object, _.isNumber);\n// => { 'user': 'fred' }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new object."
      }
    ],
    "category": "Object",
    "codeName": "omit"
  },
  {
    "id": "_.pairs",
    "name": "pairs",
    "scope": "static",
    "kind": "function",
    "description": "Creates a two dimensional array of the key-value pairs for `object`,\ne.g. `[[key1, value1], [key2, value2]]`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "object"
      }
    ],
    "examples": [
      "_.pairs({ 'barney': 36, 'fred': 40 });\n// => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of key-value pairs."
      }
    ],
    "category": "Object",
    "codeName": "pairs"
  },
  {
    "id": "_.pick",
    "name": "pick",
    "scope": "static",
    "kind": "function",
    "description": "Creates an object composed of the picked `object` properties. Property\nnames may be specified as individual arguments or as arrays of property\nnames. If `predicate` is provided it is invoked for each property of `object`\npicking the properties `predicate` returns truthy for. The predicate is\nbound to `thisArg` and invoked with three arguments; (value, key, object).",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The source object.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The function invoked per\n iteration or property names to pick, specified as individual property\n names or arrays of property names.",
        "name": "predicate"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `predicate`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred', 'age': 40 };\n\n_.pick(object, 'user');\n// => { 'user': 'fred' }\n\n_.pick(object, _.isString);\n// => { 'user': 'fred' }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Returns the new object."
      }
    ],
    "category": "Object",
    "codeName": "pick"
  },
  {
    "id": "_.result",
    "name": "result",
    "scope": "static",
    "kind": "function",
    "description": "Resolves the value of property `key` on `object`. If the value of `key` is\na function it is invoked with the `this` binding of `object` and its result\nis returned, else the property value is returned. If the property value is\n`undefined` the `defaultValue` is used in its place.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to query.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the property to resolve.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The value returned if the property value\n resolves to `undefined`.",
        "name": "defaultValue"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred', 'age': _.constant(40) };\n\n_.result(object, 'user');\n// => 'fred'\n\n_.result(object, 'age');\n// => 40\n\n_.result(object, 'status', 'busy');\n// => 'busy'\n\n_.result(object, 'status', _.constant('busy'));\n// => 'busy'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the resolved value."
      }
    ],
    "category": "Object",
    "codeName": "result"
  },
  {
    "id": "_.transform",
    "name": "transform",
    "scope": "static",
    "kind": "function",
    "description": "An alternative to `_.reduce`; this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own enumerable\nproperties through `iteratee`, with each invocation potentially mutating\nthe `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\nwith four arguments; (accumulator, value, key, object). Iterator functions\nmay exit iteration early by explicitly returning `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Array",
            "Object"
          ]
        },
        "description": "The object to iterate over.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The custom accumulator value.",
        "name": "accumulator"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var squares = _.transform([1, 2, 3, 4, 5, 6], function(result, n) {\n  n *= n;\n  if (n % 2) {\n    return result.push(n) < 3;\n  }\n});\n// => [1, 9, 25]\n\nvar mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, n, key) {\n  result[key] = n * 3;\n});\n// => { 'a': 3, 'b': 6, 'c': 9 }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the accumulated value."
      }
    ],
    "category": "Object",
    "codeName": "transform"
  },
  {
    "id": "_.values",
    "name": "values",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of the own enumerable property values of `object`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to query.",
        "name": "object"
      }
    ],
    "examples": [
      "function Shape(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nShape.prototype.z = 0;\n\n_.values(new Shape(2, 1));\n// => [2, 1] (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of property values."
      }
    ],
    "category": "Object",
    "codeName": "values"
  },
  {
    "id": "_.valuesIn",
    "name": "valuesIn",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of the own and inherited enumerable property values\nof `object`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to query.",
        "name": "object"
      }
    ],
    "examples": [
      "function Shape(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nShape.prototype.z = 0;\n\n_.valuesIn(new Shape(2, 1));\n// => [2, 1, 0] (iteration order is not guaranteed)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of property values."
      }
    ],
    "category": "Object",
    "codeName": "valuesIn"
  },
  {
    "id": "_.random",
    "name": "random",
    "scope": "static",
    "kind": "function",
    "description": "Produces a random number between `min` and `max` (inclusive). If only one\nargument is provided a number between `0` and the given number is returned.\nIf `floating` is `true`, or either `min` or `max` are floats, a floating-point\nnumber is returned instead of an integer.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The minimum possible value.",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The maximum possible value.",
        "name": "max"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Specify returning a floating-point number.",
        "name": "floating"
      }
    ],
    "examples": [
      "_.random(0, 5);\n// => an integer between 0 and 5\n\n_.random(5);\n// => also an integer between 0 and 5\n\n_.random(5, true);\n// => a floating-point number between 0 and 5\n\n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the random number."
      }
    ],
    "category": "Number",
    "codeName": "random"
  },
  {
    "id": "_.camelCase",
    "name": "camelCase",
    "scope": "static",
    "kind": "member",
    "description": "Converts `string` to camel case.\nSee [Wikipedia](http://en.wikipedia.org/wiki/CamelCase) for more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to camel case.",
        "name": "string"
      }
    ],
    "examples": [
      "_.camelCase('Hello world');\n// => 'helloWorld'\n\n_.camelCase('--hello-world');\n// => 'helloWorld'\n\n_.camelCase('__hello_world__');\n// => 'helloWorld'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the camel cased string."
      }
    ],
    "category": "String",
    "codeName": "camelCase"
  },
  {
    "id": "_.capitalize",
    "name": "capitalize",
    "scope": "static",
    "kind": "function",
    "description": "Capitalizes the first character of `string`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to capitalize.",
        "name": "string"
      }
    ],
    "examples": [
      "_.capitalize('fred');\n// => 'Fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the capitalized string."
      }
    ],
    "category": "String",
    "codeName": "capitalize"
  },
  {
    "id": "_.deburr",
    "name": "deburr",
    "scope": "static",
    "kind": "function",
    "description": "Deburrs `string` by converting latin-1 supplementary letters to basic latin letters.\nSee [Wikipedia](http://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to deburr.",
        "name": "string"
      }
    ],
    "examples": [
      "_.deburr('déjà vu');\n// => 'deja vu'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the deburred string."
      }
    ],
    "category": "String",
    "codeName": "deburr"
  },
  {
    "id": "_.endsWith",
    "name": "endsWith",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `string` ends with the given target string.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to search.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The string to search for.",
        "name": "target"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "string.length",
        "description": "The position to search from.",
        "name": "position"
      }
    ],
    "examples": [
      "_.endsWith('abc', 'c');\n// => true\n\n_.endsWith('abc', 'b');\n// => false\n\n_.endsWith('abc', 'b', 2);\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `string` ends with `target`, else `false`."
      }
    ],
    "category": "String",
    "codeName": "endsWith"
  },
  {
    "id": "_.escape",
    "name": "escape",
    "scope": "static",
    "kind": "function",
    "description": "Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and '`', in `string` to\ntheir corresponding HTML entities.\n\n**Note:** No other characters are escaped. To escape additional characters\nuse a third-party library like [_he_](http://mths.be/he).\n\nThough the \">\" character is escaped for symmetry, characters like\n\">\" and \"/\" don't require escaping in HTML and have no special meaning\nunless they're part of a tag or unquoted attribute value.\nSee [Mathias Bynens's article](http://mathiasbynens.be/notes/ambiguous-ampersands)\n(under \"semi-related fun fact\") for more details.\n\nBackticks are escaped because in Internet Explorer < 9, they can break out\nof attribute values or HTML comments. See [#102](http://html5sec.org/#102),\n[#108](http://html5sec.org/#108), and [#133](http://html5sec.org/#133) of\nthe [HTML5 Security Cheatsheet](http://html5sec.org/) for more details.\n\nWhen working with HTML you should always quote attribute values to reduce\nXSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)\nfor more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to escape.",
        "name": "string"
      }
    ],
    "examples": [
      "_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the escaped string."
      }
    ],
    "category": "String",
    "codeName": "escape"
  },
  {
    "id": "_.escapeRegExp",
    "name": "escapeRegExp",
    "scope": "static",
    "kind": "function",
    "description": "Escapes the `RegExp` special characters \"\\\", \"^\", \"$\", \".\", \"|\", \"?\", \"*\",\n\"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to escape.",
        "name": "string"
      }
    ],
    "examples": [
      "_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the escaped string."
      }
    ],
    "category": "String",
    "codeName": "escapeRegExp"
  },
  {
    "id": "_.kebabCase",
    "name": "kebabCase",
    "scope": "static",
    "kind": "member",
    "description": "Converts `string` to kebab case (a.k.a. spinal case).\nSee [Wikipedia](http://en.wikipedia.org/wiki/Letter_case#Computers) for\nmore details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to kebab case.",
        "name": "string"
      }
    ],
    "examples": [
      "_.kebabCase('Hello world');\n// => 'hello-world'\n\n_.kebabCase('helloWorld');\n// => 'hello-world'\n\n_.kebabCase('__hello_world__');\n// => 'hello-world'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the kebab cased string."
      }
    ],
    "category": "String",
    "codeName": "kebabCase"
  },
  {
    "id": "_.pad",
    "name": "pad",
    "scope": "static",
    "kind": "function",
    "description": "Pads `string` on the left and right sides if it is shorter then the given\npadding length. The `chars` string may be truncated if the number of padding\ncharacters can't be evenly divided by the padding length.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to pad.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The padding length.",
        "name": "length"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "' '",
        "description": "The string used as padding.",
        "name": "chars"
      }
    ],
    "examples": [
      "_.pad('abc', 8);\n// => '  abc   '\n\n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n\n_.pad('abc', 3);\n// => 'abc'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the padded string."
      }
    ],
    "category": "String",
    "codeName": "pad"
  },
  {
    "id": "_.padLeft",
    "name": "padLeft",
    "scope": "static",
    "kind": "function",
    "description": "Pads `string` on the left side if it is shorter then the given padding\nlength. The `chars` string may be truncated if the number of padding\ncharacters exceeds the padding length.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to pad.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The padding length.",
        "name": "length"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "' '",
        "description": "The string used as padding.",
        "name": "chars"
      }
    ],
    "examples": [
      "_.padLeft('abc', 6);\n// => '   abc'\n\n_.padLeft('abc', 6, '_-');\n// => '_-_abc'\n\n_.padLeft('abc', 3);\n// => 'abc'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the padded string."
      }
    ],
    "category": "String",
    "codeName": "padLeft"
  },
  {
    "id": "_.padRight",
    "name": "padRight",
    "scope": "static",
    "kind": "function",
    "description": "Pads `string` on the right side if it is shorter then the given padding\nlength. The `chars` string may be truncated if the number of padding\ncharacters exceeds the padding length.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to pad.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The padding length.",
        "name": "length"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "' '",
        "description": "The string used as padding.",
        "name": "chars"
      }
    ],
    "examples": [
      "_.padRight('abc', 6);\n// => 'abc   '\n\n_.padRight('abc', 6, '_-');\n// => 'abc_-_'\n\n_.padRight('abc', 3);\n// => 'abc'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the padded string."
      }
    ],
    "category": "String",
    "codeName": "padRight"
  },
  {
    "id": "_.parseInt",
    "name": "parseInt",
    "scope": "static",
    "kind": "function",
    "description": "Converts `string` to an integer of the specified radix. If `radix` is\n`undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\nin which case a `radix` of `16` is used.\n\n**Note:** This method aligns with the ES5 implementation of `parseInt`.\nSee the [ES5 spec](http://es5.github.io/#E) for more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The string to parse.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "The radix to interpret `value` by.",
        "name": "radix"
      }
    ],
    "examples": [
      "_.parseInt('08');\n// => 8"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Returns the converted integer."
      }
    ],
    "category": "String",
    "codeName": "parseInt",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.repeat",
    "name": "repeat",
    "scope": "static",
    "kind": "function",
    "description": "Repeats the given string `n` times.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to repeat.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The number of times to repeat the string.",
        "name": "n"
      }
    ],
    "examples": [
      "_.repeat('*', 3);\n// => '***'\n\n_.repeat('abc', 2);\n// => 'abcabc'\n\n_.repeat('abc', 0);\n// => ''"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the repeated string."
      }
    ],
    "category": "String",
    "codeName": "repeat"
  },
  {
    "id": "_.snakeCase",
    "name": "snakeCase",
    "scope": "static",
    "kind": "member",
    "description": "Converts `string` to snake case.\nSee [Wikipedia](http://en.wikipedia.org/wiki/Snake_case) for more details.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to snake case.",
        "name": "string"
      }
    ],
    "examples": [
      "_.snakeCase('Hello world');\n// => 'hello_world'\n\n_.snakeCase('--hello-world');\n// => 'hello_world'\n\n_.snakeCase('helloWorld');\n// => 'hello_world'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the snake cased string."
      }
    ],
    "category": "String",
    "codeName": "snakeCase"
  },
  {
    "id": "_.startsWith",
    "name": "startsWith",
    "scope": "static",
    "kind": "function",
    "description": "Checks if `string` starts with the given target string.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to search.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The string to search for.",
        "name": "target"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The position to search from.",
        "name": "position"
      }
    ],
    "examples": [
      "_.startsWith('abc', 'a');\n// => true\n\n_.startsWith('abc', 'b');\n// => false\n\n_.startsWith('abc', 'b', 1);\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Returns `true` if `string` starts with `target`, else `false`."
      }
    ],
    "category": "String",
    "codeName": "startsWith"
  },
  {
    "id": "_.template",
    "name": "template",
    "scope": "static",
    "kind": "function",
    "description": "Creates a compiled template function that can interpolate data properties\nin \"interpolate\" delimiters, HTML-escape interpolated data properties in\n\"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\nproperties may be accessed as free variables in the template. If a setting\nobject is provided it takes precedence over `_.templateSettings` values.\n\n**Note:** In the development build `_.template` utilizes sourceURLs for easier debugging.\nSee the [HTML5 Rocks article on sourcemaps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\nfor more details.\n\nFor more information on precompiling templates see\n[Lo-Dash's custom builds documentation](https://lodash.com/custom-builds).\n\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The template string.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The options object.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "RegExp"
          ]
        },
        "optional": true,
        "description": "The HTML \"escape\" delimiter.",
        "name": "options.escape"
      },
      {
        "type": {
          "names": [
            "RegExp"
          ]
        },
        "optional": true,
        "description": "The \"evaluate\" delimiter.",
        "name": "options.evaluate"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "An object to import into the template as free variables.",
        "name": "options.imports"
      },
      {
        "type": {
          "names": [
            "RegExp"
          ]
        },
        "optional": true,
        "description": "The \"interpolate\" delimiter.",
        "name": "options.interpolate"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The sourceURL of the template's compiled source.",
        "name": "options.sourceURL"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The data object variable name.",
        "name": "options.variable"
      }
    ],
    "examples": [
      "// using the \"interpolate\" delimiter to create a compiled template\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n\n// using the HTML \"escape\" delimiter to escape data property values\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n\n// using the \"evaluate\" delimiter to execute JavaScript and generate HTML\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// using the internal `print` function in \"evaluate\" delimiters\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n\n// using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n\n// using custom template delimiters\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n\n// using backslashes to treat delimiters as plain text\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n\n// using the `imports` option to import `jQuery` as `jq`\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// using the `sourceURL` option to specify a custom sourceURL for the template\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n\n// using the `variable` option to ensure a with-statement isn't used in the compiled template\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n  var __t, __p = '';\n  __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n  return __p;\n}\n\n// using the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and a stack trace\nfs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the compiled template function."
      }
    ],
    "category": "String",
    "codeName": "template",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [otherOptions] Enables the legacy `options` param signature."
      }
    ]
  },
  {
    "id": "_.trim",
    "name": "trim",
    "scope": "static",
    "kind": "function",
    "description": "Removes leading and trailing whitespace or specified characters from `string`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to trim.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "whitespace",
        "description": "The characters to trim.",
        "name": "chars"
      }
    ],
    "examples": [
      "_.trim('  fred  ');\n// => 'fred'\n\n_.trim('-_-fred-_-', '_-');\n// => 'fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the trimmed string."
      }
    ],
    "category": "String",
    "codeName": "trim",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.trimLeft",
    "name": "trimLeft",
    "scope": "static",
    "kind": "function",
    "description": "Removes leading whitespace or specified characters from `string`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to trim.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "whitespace",
        "description": "The characters to trim.",
        "name": "chars"
      }
    ],
    "examples": [
      "_.trimLeft('  fred  ');\n// => 'fred  '\n\n_.trimLeft('-_-fred-_-', '_-');\n// => 'fred-_-'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the trimmed string."
      }
    ],
    "category": "String",
    "codeName": "trimLeft",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.trimRight",
    "name": "trimRight",
    "scope": "static",
    "kind": "function",
    "description": "Removes trailing whitespace or specified characters from `string`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to trim.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "whitespace",
        "description": "The characters to trim.",
        "name": "chars"
      }
    ],
    "examples": [
      "_.trimRight('  fred  ');\n// => '  fred'\n\n_.trimRight('-_-fred-_-', '_-');\n// => '-_-fred'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the trimmed string."
      }
    ],
    "category": "String",
    "codeName": "trimRight",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.trunc",
    "name": "trunc",
    "scope": "static",
    "kind": "function",
    "description": "Truncates `string` if it is longer than the given maximum string length.\nThe last characters of the truncated string are replaced with the omission\nstring which defaults to \"...\".",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to truncate.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "Object",
            "number"
          ]
        },
        "optional": true,
        "description": "The options object or maximum string length.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "30",
        "description": "The maximum string length.",
        "name": "options.length"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'...'",
        "description": "The string to indicate text is omitted.",
        "name": "options.omission"
      },
      {
        "type": {
          "names": [
            "RegExp",
            "string"
          ]
        },
        "optional": true,
        "description": "The separator pattern to truncate to.",
        "name": "options.separator"
      }
    ],
    "examples": [
      "_.trunc('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n\n_.trunc('hi-diddly-ho there, neighborino', 24);\n// => 'hi-diddly-ho there, n...'\n\n_.trunc('hi-diddly-ho there, neighborino', { 'length': 24, 'separator': ' ' });\n// => 'hi-diddly-ho there,...'\n\n_.trunc('hi-diddly-ho there, neighborino', { 'length': 24, 'separator': /,? +/ });\n//=> 'hi-diddly-ho there...'\n\n_.trunc('hi-diddly-ho there, neighborino', { 'omission': ' [...]' });\n// => 'hi-diddly-ho there, neig [...]'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the truncated string."
      }
    ],
    "category": "String",
    "codeName": "trunc",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.unescape",
    "name": "unescape",
    "scope": "static",
    "kind": "function",
    "description": "The inverse of `_.escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\ncorresponding characters.\n\n**Note:** No other HTML entities are unescaped. To unescape additional HTML\nentities use a third-party library like [_he_](http://mths.be/he).",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to unescape.",
        "name": "string"
      }
    ],
    "examples": [
      "_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the unescaped string."
      }
    ],
    "category": "String",
    "codeName": "unescape"
  },
  {
    "id": "_.words",
    "name": "words",
    "scope": "static",
    "kind": "function",
    "description": "Splits `string` into an array of its words.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "The string to inspect.",
        "name": "string"
      },
      {
        "type": {
          "names": [
            "RegExp",
            "string"
          ]
        },
        "optional": true,
        "description": "The pattern to match words.",
        "name": "pattern"
      }
    ],
    "examples": [
      "_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the words of `string`."
      }
    ],
    "category": "String",
    "codeName": "words",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.attempt",
    "name": "attempt",
    "scope": "static",
    "kind": "function",
    "description": "Attempts to invoke `func`, returning either the result or the caught\nerror object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The function to attempt.",
        "name": "func"
      }
    ],
    "examples": [
      "// avoid throwing errors for invalid selectors\nvar elements = _.attempt(function() {\n  return document.querySelectorAll(selector);\n});\n\nif (_.isError(elements)) {\n  elements = [];\n}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns the `func` result or error object."
      }
    ],
    "category": "Utility",
    "codeName": "attempt"
  },
  {
    "id": "_.iteratee",
    "name": "iteratee",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function bound to an optional `thisArg`. If `func` is a property\nname the created callback returns the property value for a given element.\nIf `func` is an object the created callback returns `true` for elements\nthat contain the equivalent object properties, otherwise it returns `false`.",
    "memberof": "_",
    "alias": "iteratee",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The value to convert to a callback.",
        "name": "func"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of the created callback.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// wrap to create custom callback shorthands\n_.callback = _.wrap(_.callback, function(callback, func, thisArg) {\n  var match = /^(.+?)__([gl]t)(.+)$/.exec(func);\n  if (!match) {\n    return callback(func, thisArg);\n  }\n  return function(object) {\n    return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];\n  };\n});\n\n_.filter(users, 'age__gt36');\n// => [{ 'user': 'fred', 'age': 40 }]"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Utility",
    "codeName": "callback",
    "customTags": [
      {
        "tag": "param-",
        "value": "{Object} [guard] Enables use as a callback for functions like `_.map`."
      }
    ]
  },
  {
    "id": "_.constant",
    "name": "constant",
    "scope": "static",
    "kind": "function",
    "description": "Creates a function that returns `value`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value to return from the new function.",
        "name": "value"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred' };\nvar getter = _.constant(object);\ngetter() === object;\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Utility",
    "codeName": "constant"
  },
  {
    "id": "_.identity",
    "name": "identity",
    "scope": "static",
    "kind": "function",
    "description": "This method returns the first argument provided to it.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Any value.",
        "name": "value"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred' };\n_.identity(object) === object;\n// => true"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "Returns `value`."
      }
    ],
    "category": "Utility",
    "codeName": "identity"
  },
  {
    "id": "_.matches",
    "name": "matches",
    "scope": "static",
    "kind": "function",
    "description": "Creates a \"_.where\" style predicate function which performs a deep comparison\nbetween a given object and `source`, returning `true` if the given object\nhas equivalent property values, else `false`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object of property values to match.",
        "name": "source"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\nvar matchesAge = _.matches({ 'age': 36 });\n\n_.filter(users, matchesAge);\n// => [{ 'user': 'barney', 'age': 36 }]\n\n_.find(users, matchesAge);\n// => { 'user': 'barney', 'age': 36 }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Utility",
    "codeName": "matches"
  },
  {
    "id": "_.mixin",
    "name": "mixin",
    "scope": "static",
    "kind": "function",
    "description": "Adds all own enumerable function properties of a source object to the\ndestination object. If `object` is a function then methods are added to\nits prototype as well.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "function",
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "this",
        "description": "object The destination object.",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object of functions to add.",
        "name": "source"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The options object.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": "true",
        "description": "Specify whether the functions added\n are chainable.",
        "name": "options.chain"
      }
    ],
    "examples": [
      "function vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n\n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n\n_('fred').vowels().value();\n// => ['e']\n\n_.mixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function",
            "Object"
          ]
        },
        "description": "Returns `object`."
      }
    ],
    "category": "Utility",
    "codeName": "mixin"
  },
  {
    "id": "_.noConflict",
    "name": "noConflict",
    "scope": "static",
    "kind": "function",
    "description": "Reverts the `_` variable to its previous value and returns a reference to\nthe `lodash` function.",
    "memberof": "_",
    "examples": [
      "var lodash = _.noConflict();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the `lodash` function."
      }
    ],
    "category": "Utility",
    "codeName": "noConflict"
  },
  {
    "id": "_.noop",
    "name": "noop",
    "scope": "static",
    "kind": "function",
    "description": "A no-operation function.",
    "memberof": "_",
    "examples": [
      "var object = { 'user': 'fred' };\n_.noop(object) === undefined;\n// => true"
    ],
    "category": "Utility",
    "codeName": "noop"
  },
  {
    "id": "_.property",
    "name": "property",
    "scope": "static",
    "kind": "function",
    "description": "Creates a \"_.pluck\" style function which returns the property value\nof `key` on a given object.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the property to retrieve.",
        "name": "key"
      }
    ],
    "examples": [
      "var users = [\n  { 'user': 'fred' },\n  { 'user': 'barney' }\n];\n\nvar getName = _.property('user');\n\n_.map(users, getName);\n// => ['fred', barney']\n\n_.pluck(_.sortBy(users, getName), 'user');\n// => ['barney', 'fred']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Utility",
    "codeName": "property"
  },
  {
    "id": "_.propertyOf",
    "name": "propertyOf",
    "scope": "static",
    "kind": "function",
    "description": "The inverse of `_.property`; this method creates a function which returns\nthe property value of a given key on `object`.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to inspect.",
        "name": "object"
      }
    ],
    "examples": [
      "var object = { 'user': 'fred', 'age': 40, 'active': true };\n_.map(['active', 'user'], _.propertyOf(object));\n// => [true, 'fred']\n\nvar object = { 'a': 3, 'b': 1, 'c': 2 };\n_.sortBy(['a', 'b', 'c'], _.propertyOf(object));\n// => ['b', 'c', 'a']"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Returns the new function."
      }
    ],
    "category": "Utility",
    "codeName": "propertyOf"
  },
  {
    "id": "_.range",
    "name": "range",
    "scope": "static",
    "kind": "function",
    "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. If `start` is less than `end` a\nzero-length range is created unless a negative `step` is specified.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "0",
        "description": "The start of the range.",
        "name": "start"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The end of the range.",
        "name": "end"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "1",
        "description": "The value to increment or decrement by.",
        "name": "step"
      }
    ],
    "examples": [
      "_.range(4);\n// => [0, 1, 2, 3]\n\n_.range(1, 5);\n// => [1, 2, 3, 4]\n\n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n\n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n\n_.range(1, 4, 0);\n// => [1, 1, 1]\n\n_.range(0);\n// => []"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the new array of numbers."
      }
    ],
    "category": "Utility",
    "codeName": "range"
  },
  {
    "id": "_.times",
    "name": "times",
    "scope": "static",
    "kind": "function",
    "description": "Invokes the iteratee function `n` times, returning an array of the results\nof each invocation. The `iteratee` is bound to `thisArg` and invoked with\none argument; (index).",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The number of times to invoke `iteratee`.",
        "name": "n"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "_.identity",
        "description": "The function invoked per iteration.",
        "name": "iteratee"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "The `this` binding of `iteratee`.",
        "name": "thisArg"
      }
    ],
    "examples": [
      "var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));\n// => [3, 6, 4]\n\n_.times(3, function(n) { mage.castSpell(n); });\n// => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2` respectively\n\n_.times(3, function(n) { this.cast(n); }, mage);\n// => also invokes `mage.castSpell(n)` three times"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Returns the array of results."
      }
    ],
    "category": "Utility",
    "codeName": "times"
  },
  {
    "id": "_.uniqueId",
    "name": "uniqueId",
    "scope": "static",
    "kind": "function",
    "description": "Generates a unique ID. If `prefix` is provided the ID is appended to it.",
    "memberof": "_",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The value to prefix the ID with.",
        "name": "prefix"
      }
    ],
    "examples": [
      "_.uniqueId('contact_');\n// => 'contact_104'\n\n_.uniqueId();\n// => '105'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Returns the unique ID."
      }
    ],
    "category": "Utility",
    "codeName": "uniqueId"
  },
  {
    "id": "_.lodash.VERSION",
    "name": "VERSION",
    "scope": "static",
    "kind": "member",
    "description": "The semantic version number.",
    "memberof": "_.lodash",
    "type": {
      "names": [
        "string"
      ]
    },
    "codeName": "lodash.VERSION"
  }
]