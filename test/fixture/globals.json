[
  {
    "id": "onComplete",
    "name": "onComplete",
    "kind": "typedef",
    "description": "Called when an async operation completes",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an error, or `null`",
        "name": "err"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the result info",
        "name": "result"
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "scope": "global"
  },
  {
    "id": "read",
    "name": "read",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the filename",
        "name": "filename"
      },
      {
        "type": {
          "names": [
            "onComplete"
          ]
        },
        "description": "the callback",
        "name": "done"
      }
    ],
    "codeName": "read"
  },
  {
    "id": "All",
    "name": "All",
    "scope": "global",
    "kind": "class",
    "augments": [
      "Number"
    ],
    "author": [
      "75lb <75pound@gmail.com>"
    ],
    "deprecated": true,
    "codeName": "All",
    "description": "a class with all of the things"
  },
  {
    "id": "All◊",
    "name": "All",
    "kind": "constructor",
    "description": "the constructor description",
    "memberof": "All",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an input",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "optional shit",
        "name": "options"
      }
    ],
    "examples": [
      "```js\nvar yeah = new Everything(true);\n```"
    ]
  },
  {
    "id": "All#topping",
    "name": "topping",
    "scope": "instance",
    "kind": "member",
    "description": "the ingredients on top",
    "memberof": "All",
    "type": {
      "names": [
        "string"
      ]
    },
    "defaultvalue": "mud, lettuce",
    "codeName": "this.topping"
  },
  {
    "id": "All#size",
    "name": "size",
    "scope": "instance",
    "kind": "member",
    "description": "the general size",
    "memberof": "All",
    "codeName": "this.size"
  },
  {
    "id": "All#allThings",
    "name": "allThings",
    "scope": "instance",
    "kind": "function",
    "description": "This function has all tags set",
    "memberof": "All",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a second input",
        "name": "two"
      }
    ],
    "examples": [
      "```js\nall.allTogether(true);\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "this return has several types"
      }
    ],
    "author": [
      "Lloyd <75pound@gmail.com>"
    ],
    "deprecated": true,
    "codeName": "All.prototype.allThings"
  },
  {
    "id": "All#allThings~some",
    "name": "some",
    "scope": "inner",
    "kind": "member",
    "description": "a rarseclart inner",
    "memberof": "All#allThings",
    "codeName": "some"
  },
  {
    "id": "Person",
    "name": "Person",
    "scope": "global",
    "kind": "class",
    "augments": [
      "Object"
    ],
    "codeName": "Person",
    "description": "simple class description"
  },
  {
    "id": "Person◊",
    "name": "Person",
    "kind": "constructor",
    "description": "a constructor description",
    "memberof": "Person"
  },
  {
    "id": "Car",
    "name": "Car",
    "scope": "global",
    "kind": "class",
    "codeName": "Car"
  },
  {
    "id": "Car◊",
    "name": "Car",
    "kind": "constructor",
    "description": "a constructor with args",
    "memberof": "Car",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "optional shit",
        "name": "options"
      }
    ]
  },
  {
    "id": "Pipe",
    "name": "Pipe",
    "scope": "global",
    "kind": "class",
    "augments": [
      "Pipe"
    ],
    "codeName": "Pipe",
    "description": "a class which extends"
  },
  {
    "id": "Pipe◊",
    "name": "Pipe",
    "kind": "constructor",
    "memberof": "Pipe"
  },
  {
    "id": "Everything",
    "name": "Everything",
    "scope": "global",
    "kind": "class",
    "augments": [
      "Pipe"
    ],
    "author": [
      "75lb <75pound@gmail.com>"
    ],
    "deprecated": true,
    "codeName": "Everything",
    "description": "a class with all trimmings"
  },
  {
    "id": "Everything◊",
    "name": "Everything",
    "kind": "constructor",
    "description": "the constructor description",
    "memberof": "Everything",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an input",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "optional shit",
        "name": "options"
      }
    ],
    "examples": [
      "```js\nvar yeah = new Everything(true);\n```"
    ]
  },
  {
    "id": "Rice#event:cooked",
    "name": "cooked",
    "scope": "instance",
    "kind": "event",
    "description": "Fired when rice is ready",
    "memberof": "Rice"
  },
  {
    "id": "Rice#event:cooking",
    "name": "cooking",
    "scope": "instance",
    "kind": "event",
    "description": "Fired when rice is cooking",
    "memberof": "Rice"
  },
  {
    "id": "Rice",
    "name": "Rice",
    "scope": "global",
    "kind": "class",
    "codeName": "Rice"
  },
  {
    "id": "Rice◊",
    "name": "Rice",
    "kind": "constructor",
    "memberof": "Rice"
  },
  {
    "id": "Something",
    "name": "Something",
    "scope": "global",
    "kind": "class",
    "codeName": "Something"
  },
  {
    "id": "Something◊",
    "name": "Something",
    "kind": "constructor",
    "memberof": "Something"
  },
  {
    "id": "Something#methodOne",
    "name": "methodOne",
    "scope": "instance",
    "kind": "function",
    "description": "method description",
    "memberof": "Something",
    "codeName": "Something.prototype.methodOne"
  },
  {
    "id": "Something#allTogether",
    "name": "allTogether",
    "scope": "instance",
    "kind": "function",
    "description": "This function has all tags set",
    "memberof": "Something",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a second input",
        "name": "two"
      }
    ],
    "examples": [
      "```js\nsomething.allTogether(true);\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "this return has several types"
      }
    ],
    "author": [
      "Lloyd <75pound@gmail.com>"
    ],
    "deprecated": true,
    "codeName": "Something.prototype.allTogether"
  },
  {
    "id": "Pizza",
    "name": "Pizza",
    "scope": "global",
    "kind": "class",
    "codeName": "Pizza"
  },
  {
    "id": "Pizza◊",
    "name": "Pizza",
    "kind": "constructor",
    "memberof": "Pizza"
  },
  {
    "id": "Pizza#topping",
    "name": "topping",
    "scope": "instance",
    "kind": "member",
    "description": "the ingredients on top",
    "memberof": "Pizza",
    "type": {
      "names": [
        "string"
      ]
    },
    "defaultvalue": "mud, lettuce",
    "codeName": "this.topping"
  },
  {
    "id": "Pizza#size",
    "name": "size",
    "scope": "instance",
    "kind": "member",
    "description": "the general size",
    "memberof": "Pizza",
    "codeName": "this.size"
  },
  {
    "id": "CONST_ONE",
    "name": "CONST_ONE",
    "scope": "global",
    "kind": "constant",
    "description": "the first important constant",
    "type": {
      "names": [
        "number"
      ]
    },
    "codeName": "CONST_ONE"
  },
  {
    "id": "CONST_TWO",
    "name": "CONST_TWO",
    "scope": "global",
    "kind": "constant",
    "description": "This variable has all tags set",
    "examples": [
      "```js\nvar CONST_TWO = true;\n```"
    ],
    "type": {
      "names": [
        "boolean"
      ]
    },
    "readonly": true,
    "author": [
      "Lloyd Brookes <lloyd@brookes.com>"
    ],
    "deprecated": true,
    "codeName": "CONST_TWO"
  },
  {
    "id": "customTaggedFunction",
    "name": "customTaggedFunction",
    "scope": "global",
    "kind": "function",
    "description": "this function has a wonderful custom tag",
    "createdin": "Nigeria",
    "codeName": "customTaggedFunction"
  },
  {
    "id": "eFileType",
    "name": "eFileType",
    "scope": "global",
    "kind": "member",
    "description": "Enum for the `type` value",
    "type": {
      "names": [
        "number"
      ]
    },
    "readonly": true,
    "isEnum": true,
    "codeName": "eFileType"
  },
  {
    "id": "eFileType.NOEXIST",
    "name": "NOEXIST",
    "scope": "static",
    "kind": "member",
    "memberof": "eFileType",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "0",
    "codeName": "NOEXIST"
  },
  {
    "id": "eFileType.FILE",
    "name": "FILE",
    "scope": "static",
    "kind": "member",
    "memberof": "eFileType",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "1",
    "codeName": "FILE"
  },
  {
    "id": "eFileType.DIR",
    "name": "DIR",
    "scope": "static",
    "kind": "member",
    "memberof": "eFileType",
    "type": {
      "names": [
        "number"
      ]
    },
    "defaultvalue": "2",
    "codeName": "DIR"
  },
  {
    "id": "globalFunc",
    "name": "globalFunc",
    "scope": "global",
    "kind": "function",
    "description": "a global function",
    "codeName": "globalFunc"
  },
  {
    "id": "exampled",
    "name": "exampled",
    "scope": "global",
    "kind": "function",
    "description": "a function with an example",
    "examples": [
      "```js\nvar result = exampled();\n```"
    ],
    "codeName": "exampled"
  },
  {
    "id": "multiExampled",
    "name": "multiExampled",
    "scope": "global",
    "kind": "function",
    "description": "a function with multiple examples",
    "examples": [
      "```js\nvar another = 100;\n```",
      "```js\nvar next = \"p\";\n```"
    ],
    "codeName": "multiExampled"
  },
  {
    "id": "_protected",
    "name": "_protected",
    "scope": "global",
    "kind": "function",
    "access": "protected",
    "codeName": "_protected"
  },
  {
    "id": "withAuthor",
    "name": "withAuthor",
    "scope": "global",
    "kind": "function",
    "author": [
      "Clive Jones <clive@jones.com>"
    ],
    "codeName": "withAuthor"
  },
  {
    "id": "oldFunction",
    "name": "oldFunction",
    "scope": "global",
    "kind": "function",
    "deprecated": true,
    "codeName": "oldFunction"
  },
  {
    "id": "newFunction",
    "name": "newFunction",
    "scope": "global",
    "kind": "function",
    "codeName": "newFunction"
  },
  {
    "id": "withParam",
    "name": "withParam",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      }
    ],
    "codeName": "withParam"
  },
  {
    "id": "withParams",
    "name": "withParams",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "name": "two"
      }
    ],
    "codeName": "withParams"
  },
  {
    "id": "withOptional",
    "name": "withOptional",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "this one is optional",
        "name": "two"
      }
    ],
    "codeName": "withOptional"
  },
  {
    "id": "withBullets",
    "name": "withBullets",
    "scope": "global",
    "kind": "function",
    "description": "this description has \n\n- bullet\n- points\n\nand needs this line to separate the above list from the below",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a second input",
        "name": "two"
      }
    ],
    "codeName": "withBullets"
  },
  {
    "id": "returnsSomething",
    "name": "returnsSomething",
    "scope": "global",
    "kind": "function",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "codeName": "returnsSomething"
  },
  {
    "id": "returnsSomethingDesc",
    "name": "returnsSomethingDesc",
    "scope": "global",
    "kind": "function",
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "this return has a description"
      }
    ],
    "codeName": "returnsSomethingDesc"
  },
  {
    "id": "returnsSeveral",
    "name": "returnsSeveral",
    "scope": "global",
    "kind": "function",
    "returns": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "this return has several types"
      }
    ],
    "codeName": "returnsSeveral"
  },
  {
    "id": "allTogether",
    "name": "allTogether",
    "scope": "global",
    "kind": "function",
    "description": "This function has all tags set",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The input string",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a second input",
        "name": "two"
      }
    ],
    "examples": [
      "```js\nallTogether(true);\n```"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "this return has several types"
      }
    ],
    "author": [
      "Lloyd <75pound@gmail.com>"
    ],
    "deprecated": true,
    "codeName": "allTogether"
  },
  {
    "id": "visible",
    "name": "visible",
    "scope": "global",
    "kind": "member",
    "description": "a visible global",
    "codeName": "visible"
  },
  {
    "id": "module:foo/bar",
    "name": "foo/bar",
    "kind": "module",
    "description": "A module. Refer to it using {@link module:foo/bar}."
  },
  {
    "id": "external:String",
    "name": "String",
    "scope": "inner",
    "kind": "external",
    "description": "The built in string object. Refer to it with {@link external:String}.",
    "memberof": "module:foo/bar"
  },
  {
    "id": "module:foo/bar.event:MyEvent",
    "name": "event:MyEvent",
    "scope": "static",
    "kind": "event",
    "description": "An event. Refer to with {@link module:foo/bar.event:MyEvent}.",
    "memberof": "module:foo/bar"
  },
  {
    "id": "module:foo/bar~linkFunction",
    "name": "linkFunction",
    "scope": "inner",
    "kind": "function",
    "description": "See {@link LinkClass} and [LinkClass's foo property]{@link LinkClass#foo}.\nAlso check out {@link http://www.google.com|Google} and {@link http://github.com GitHub}.",
    "memberof": "module:foo/bar",
    "codeName": "linkFunction"
  },
  {
    "id": "module:foo/bar~LinkClass",
    "name": "LinkClass",
    "scope": "inner",
    "kind": "class",
    "memberof": "module:foo/bar",
    "codeName": "LinkClass"
  },
  {
    "id": "module:foo/bar~LinkClass◊",
    "name": "LinkClass",
    "kind": "constructor",
    "description": "A class.",
    "memberof": "module:foo/bar~LinkClass"
  },
  {
    "id": "module:foo/bar~LinkClass#foo",
    "name": "foo",
    "scope": "instance",
    "kind": "member",
    "description": "foo property",
    "memberof": "module:foo/bar~LinkClass",
    "codeName": "this.foo"
  },
  {
    "id": "variable",
    "name": "variable",
    "scope": "global",
    "kind": "member",
    "description": "a global variable",
    "codeName": "variable"
  },
  {
    "id": "typed",
    "name": "typed",
    "scope": "global",
    "kind": "member",
    "type": {
      "names": [
        "string"
      ]
    },
    "codeName": "typed"
  },
  {
    "id": "types",
    "name": "types",
    "scope": "global",
    "kind": "member",
    "type": {
      "names": [
        "string",
        "number"
      ]
    },
    "codeName": "types"
  },
  {
    "id": "exampled",
    "name": "exampled",
    "scope": "global",
    "kind": "member",
    "description": "a var with an example",
    "examples": [
      "```js\nvar another = 100;\n```"
    ],
    "codeName": "exampled"
  },
  {
    "id": "examples",
    "name": "examples",
    "scope": "global",
    "kind": "member",
    "description": "a var with multiple examples",
    "examples": [
      "```js\nvar another = 100;\n```",
      "```js\nvar next = \"p\";\n```"
    ],
    "codeName": "examples"
  },
  {
    "id": "_protected",
    "name": "_protected",
    "scope": "global",
    "kind": "member",
    "access": "protected",
    "codeName": "_protected"
  },
  {
    "id": "withAuthor",
    "name": "withAuthor",
    "scope": "global",
    "kind": "member",
    "author": [
      "Clive Jones <clive@jones.com>"
    ],
    "codeName": "withAuthor"
  },
  {
    "id": "hasDefault",
    "name": "hasDefault",
    "scope": "global",
    "kind": "member",
    "defaultvalue": "23",
    "codeName": "hasDefault"
  },
  {
    "id": "hasDefaultObject",
    "name": "hasDefaultObject",
    "scope": "global",
    "kind": "member",
    "defaultvalue": "{\"one\":1,\"two\":2}",
    "codeName": "hasDefaultObject"
  },
  {
    "id": "deprecated",
    "name": "deprecated",
    "scope": "global",
    "kind": "member",
    "deprecated": true,
    "codeName": "deprecated"
  },
  {
    "id": "readOnly",
    "name": "readOnly",
    "scope": "global",
    "kind": "member",
    "readonly": true,
    "codeName": "readOnly"
  },
  {
    "id": "hasSince",
    "name": "hasSince",
    "scope": "global",
    "kind": "member",
    "codeName": "hasSince"
  },
  {
    "id": "car",
    "name": "car",
    "scope": "global",
    "kind": "namespace",
    "codeName": "car"
  },
  {
    "id": "car.wheels",
    "name": "wheels",
    "scope": "static",
    "kind": "member",
    "description": "the round things",
    "memberof": "car",
    "codeName": "wheels"
  },
  {
    "id": "car.sensors",
    "name": "sensors",
    "scope": "static",
    "kind": "member",
    "description": "the electronics that always go wrong",
    "memberof": "car",
    "codeName": "sensors"
  },
  {
    "id": "car.start",
    "name": "start",
    "scope": "static",
    "kind": "function",
    "description": "start the car",
    "memberof": "car",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      },
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "codeName": "start"
  },
  {
    "id": "car#env",
    "name": "env",
    "scope": "instance",
    "kind": "namespace",
    "description": "decribes the current conditions",
    "memberof": "car",
    "codeName": "this.env"
  },
  {
    "id": "car#env.weather",
    "name": "weather",
    "scope": "static",
    "kind": "member",
    "description": "what kind of day is it",
    "memberof": "car#env",
    "type": {
      "names": [
        "string"
      ]
    },
    "defaultvalue": "choppy",
    "codeName": "weather"
  },
  {
    "id": "car#env.roads",
    "name": "roads",
    "scope": "static",
    "kind": "member",
    "description": "road condition",
    "memberof": "car#env",
    "type": {
      "names": [
        "string"
      ]
    },
    "defaultvalue": "wet",
    "codeName": "roads"
  },
  {
    "id": "doSomething",
    "name": "doSomething",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the function options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "first option",
        "name": "options.one"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "second option",
        "name": "options.two"
      }
    ],
    "codeName": "doSomething"
  },
  {
    "id": "doAnother",
    "name": "doAnother",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the function options",
        "name": "options"
      }
    ],
    "codeName": "doAnother"
  },
  {
    "id": "pluck",
    "name": "pluck",
    "scope": "global",
    "kind": "function",
    "description": "This function takes variable input",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "variable": true,
        "description": "the property(s) as input",
        "name": "prop"
      }
    ],
    "codeName": "pluck"
  },
  {
    "id": "Plucker",
    "name": "Plucker",
    "scope": "global",
    "kind": "class",
    "codeName": "Plucker"
  },
  {
    "id": "Plucker◊",
    "name": "Plucker",
    "kind": "constructor",
    "memberof": "Plucker"
  },
  {
    "id": "Plucker#doPluck",
    "name": "doPluck",
    "scope": "instance",
    "kind": "function",
    "description": "This function takes variable input",
    "memberof": "Plucker",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "an input",
        "name": "one"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "variable": true,
        "description": "the property(s) as input",
        "name": "args"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "variable": true,
        "description": "more input",
        "name": "three"
      }
    ],
    "codeName": "Plucker.prototype.doPluck"
  },
  {
    "id": "requirer",
    "name": "requirer",
    "scope": "global",
    "kind": "function",
    "description": "ensure you have some-module installed",
    "requires": [
      "module:some-module"
    ],
    "codeName": "requirer"
  },
  {
    "id": "NumberLike",
    "name": "NumberLike",
    "kind": "typedef",
    "description": "A number, or a string containing a number.",
    "type": {
      "names": [
        "number",
        "string"
      ]
    },
    "scope": "global"
  },
  {
    "id": "setMagicNumber",
    "name": "setMagicNumber",
    "scope": "global",
    "kind": "function",
    "description": "Set the magic number.",
    "params": [
      {
        "type": {
          "names": [
            "NumberLike"
          ]
        },
        "description": "The magic number.",
        "name": "x"
      }
    ],
    "codeName": "setMagicNumber"
  },
  {
    "id": "doSomething",
    "name": "doSomething",
    "scope": "global",
    "kind": "function",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the function options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "first option",
        "name": "options.one"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "second option",
        "name": "options.two"
      }
    ],
    "codeName": "doSomething"
  }
]